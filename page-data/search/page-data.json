{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n함수 f(x,y) = $2x^2 + 6xy + 7y^2 -26x -54y + 107$로 표현되는 지형을 그래프로 나타내고, 지형의 (14,4)지점에 공을 두었다면 어떤 경로로 공이 움직일지 경로를 그려라\n\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport sympy\nimport matplotlib as mpl\nimport scipy as sp\nimport pandas as pd\n```\n\n\n```python\nblack = {'facecolor':'black'}\ndef f(x,y):\n    return 2*x**2+6*x*y+7*y**2-26*x-54*y+107\nxx = np.linspace(1,16,100)\nyy = np.linspace(-3,6,90)\nX, Y = np.meshgrid(xx,yy)\nZ=f(X,Y)\n\ndef gx(x,y):\n    return 4*x+6*y-26\ndef gy(x,y):\n    return 6*x+14*y-54\n\nxx2 = np.linspace(1,16,15)\nyy2 = np.linspace(-3,6,9)\nX2,Y2 = np.meshgrid(xx2,yy2)\nGX = gx(X2,Y2)\nGY = gy(X2,Y2)\nplt.figure(figsize=(10,5))\nplt.contour(X,Y,Z, levels=np.logspace(0,3,10))\n\nx0=(14,4)\nplt.plot(x0[0],x0[1],'ko',ms=10)\n\nfor i in range(20):\n    g=np.array((gx(x0[0],x0[1]),gy(x0[0],x0[1])))\n    x_next= x0-0.02*g\n    plt.annotate('',xy=x_next,xytext=x0,arrowprops=black)\n    x0= x_next\n    plt.quiver(X2,Y2,GX,GY,color='blue', scale=400, minshaft=2)\n\nplt.xlabel('x')\nplt.ylabel('y')\n\nplt.show()\n```\n\n\n![png](./chapter4_from_page_317_to_318_2_0.png)\n\n\n\n```python\n\n```\n","excerpt":"함수 f(x,y) = 로 표현되는 지형을 그래프로 나타내고, 지형의 (14,4)지점에 공을 두었다면 어떤 경로로 공이 움직일지 경로를 그려라","fields":{"slug":"/chapter4_from_page_317_to_318_files/"},"frontmatter":{"date":"Jan 22, 2021","title":"기울기 벡터를 이용한 응용 문제 풀이.","tags":["Matplotlib","gredient vector","기울기 벡터","퀴버플로"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"### Steps to get a gradient vector.      \n- given equation: f(x,y) = $2x^2 + 6xy + 7y^2 -26x -54y + 107$\n- first, cal with respect to x and y each. Then you will get a two derivative equations\n\n\\begin{equation}\n    \\nabla (f)= \\begin{bmatrix}\n4x+6y-26\\\\\n6x+14y-54\n\\end{bmatrix}\n\\end{equation}\n\n- second, choose the point where you want to get a slope each. Then apply the point.\n    - x=7,y=1\n        - then you will get an (8,2) which is a slope of each derevative. \n- at last, try to get a gradient vector by calculating the following : $\\sqrt{8^2+2^2}$\n\n\n\n\n```python\nimport numpy as np\nimport matplotlib.pylab as plt\n\nblack = {'facecolor':'black'}\ndef g(x,y):\n    return (4*x+6*y-26, 6*x+14*y-54)\ng1 = g(7,1)\ng2 = g(2,1)\n\nplt.plot(0,0,'kP',ms=10)\nplt.plot(g1[0],g1[1],'ro',ms=10)\nplt.annotate('',xy=g1,xytext=(0,0),arrowprops=black)\nplt.plot(g2[0],g2[1],'ro',ms=10)\nplt.annotate('',xy=g2,xytext=(0,0),arrowprops=black)\n\nplt.axis('equal')\nplt.show()\n```\n\n\n![png](./Cal_Matrix_chapter4_from_page_313_to_316_1_0.png)\n\n\nFollowing graph is to show the function : f(x,y) = $2x^2 + 6xy + 7y^2 -26x -54y + 107$\n\n\n```python\ndef f(x,y):\n    return 2*x**2+6*x*y+7*y**2-26*x-54*y+107\nxx = np.linspace(1,16,100)\nyy = np.linspace(-3,6,90)\nX,Y = np.meshgrid(xx,yy)\nZ=f(X,Y)\n\ndef gx(x,y):\n    return 4*x+6*y-26\ndef gy(x,y):\n    return 6*x+14*y-54\n\nxx2 = np.linspace(1,16,15)\nyy2 = np.linspace(-3,6,9)\n\nX2, Y2 = np.meshgrid(xx2,yy2)\nGX = gx(X2,Y2)\nGY = gy(X2,Y2)\nplt.figure(figsize = (10,5))\nplt.contour(X,Y,Z, levels=np.logspace(0,3,10))\nplt.quiver(X2, Y2, GX, GY, color='blue', scale=400, minshaft=2)\n\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('quiver plot')\nplt.show()\n```\n\n\n![png](./Cal_Matrix_chapter4_from_page_313_to_316_3_0.png)\n\n\n\n```python\n\n```\n","excerpt":"Steps to get a gradient vector. given equation: f(x,y) =  first, cal with respect to x and y each. Then you will get a two derivative equat…","fields":{"slug":"/Cal_Matrix_chapter4_from_page_313_to_316_files/"},"frontmatter":{"date":"Jan 18, 2021","title":"Matplotlib을 이용해 기울기 벡터 퀴버플롯 그래프 표현.","tags":["Matplotlib","gredient vector","기울기 벡터","퀴버플로"],"update":"Jan 01, 0001"}}}]}},"pageContext":{}},"staticQueryHashes":["2027115977","694178885"]}