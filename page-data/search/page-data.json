{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n```python\nimport numpy as np\nimport pandas as pd\n```\n\n# 시리즈\n- 인덱스는 데이터값과 일대일 매칭 \n- 데이터가 나열된 1차원 형식의 배열 형태\n\n## 시리즈 생성\n- 딕셔너리 데이터 생성\n- Sr = pd.Series(data=딕셔너리데이터이름, index=[])\n\n\n```python\nseries_data = {\"팀원1\":\"김승규\",\"팀원2\":\"박성준\",\"팀원3\":\"김아람\"}\nsr = pd.Series(data=series_data)\nsr\n```\n\n\n\n\n    팀원1    김승규\n    팀원2    박성준\n    팀원3    김아람\n    dtype: object\n\n\n\n## 인덱스 구조\n- 인덱스값 배열\n    - 시리즈 객체.index\n- 데이터값 배열\n    - 시리즈 객체.values\n\n\n```python\nsr.index\n```\n\n\n\n\n    Index(['팀원1', '팀원2', '팀원3'], dtype='object')\n\n\n\n\n```python\nsr.values\n```\n\n\n\n\n    array(['김승규', '박성준', '김아람'], dtype=object)\n\n\n\n## 원소 선택\n- 정수형 위치 인덱스: iloc.대괄호([])안에 위치를 나타내는 숫자 입력. \n- 문자역 위치 인덱스: loc.대괄호([])안에 인덱스 이름 입력.\n\n\n```python\nsr.iloc[2]\n```\n\n\n\n\n    '김아람'\n\n\n\n\n```python\nsr.loc[\"팀원2\"]\n```\n\n\n\n\n    '박성준'\n\n\n\n# 데이터 프레임\n- 데이터 프레임은 데이터 배열 형태.\n- 여러개의 열 벡터들이 같은 행 인덱스 기준으로 줄지어 결합된 2차원 벡터 또는 행렬.\n\n## 데이터 프레임 만들기\n- pandas.DataFrame(딕셔너리형태 객체 이름)\n- df = pandas.DataFrame(딕셔너리형태 객체 이름)\n\n\n```python\n회사ID리스트 = {\"회사ID1\":\"1232134\",\"회사ID2\":\"5839204\",\"회사ID3\":\"13224213\"}\ndf = pd.DataFrame(회사ID리스트, index = [\"1\",\"2\",\"3\"])\ndisplay(df)\n```\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>회사ID1</th>\n      <th>회사ID2</th>\n      <th>회사ID3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n## 행 이름과 인덱스 이름 설정 \n- pd.DataFrame(데이터이름, index = [], columns =[])\n\n## 행 이름과 인덱스 이름 바꾸기\n- df.index = [새로운 행 이름 배열]\n- df.columns = [새로운 열 이름 배열]\n\n## 특정 행 이름과 인덱스 이름 바꾸기\n- df.rename(index={\"예전이름\":\"바꿀이름\",\"예전이름\":\"바꿀이름\"})\n- df.rename(columns={\"예전이름\":\"바꿀이름\",\"예전이름\":\"바꿀이름\"})\n\n\n```python\ndf.rename(index={\"1\":\"1_회사\"}) #실제 df에는 영향을 주지 않음.\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>회사ID1</th>\n      <th>회사ID2</th>\n      <th>회사ID3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1_회사</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ndf.rename(columns={\"회사ID1\":\"회사ID_1\"}) #실제 df에는 영향을 주지 않음.\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>회사ID_1</th>\n      <th>회사ID2</th>\n      <th>회사ID3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n## 행,열 삭제\n행, 열을 소거시 drop()메서드를 사용하고 행은 axis=0 열은 axis=1로 설정한다.\n- df.drop(행 인덱스 또는 리스트, axis = 0)\n- df.drop(열 인덱스 또는 리스트, axis = 1)\n\n\n```python\ndf.drop(\"1\", axis=0) #실제 df에는 영향을 주지 않음.\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>회사ID1</th>\n      <th>회사ID2</th>\n      <th>회사ID3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ndf.drop([\"1\",\"2\"], axis=0) #실제 df에는 영향을 주지 않음.\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>회사ID1</th>\n      <th>회사ID2</th>\n      <th>회사ID3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ndf.drop(\"회사ID1\", axis=1)\n#df.drop(df[[\"회사ID1\"]], axis=1) 와도 같다.\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>회사ID2</th>\n      <th>회사ID3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>5839204</td>\n      <td>13224213</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5839204</td>\n      <td>13224213</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5839204</td>\n      <td>13224213</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n#df = df.drop(index=df.query('열이름 비교연산자 조건').index)\n```\n\n\n\n## 행 인덱스 선택 \n- 데이터프래임의 행 인덱스를 선택하기 위해서는 loc와 iloc인덱서를 사용한다. \n- 문자타입의 인덱스를 선택하기 위해서는 loc\n- 정수형타입의 인덱스를 선택하기 위해서는 iloc을 사용한다.\n\n|구분|loc|iloc|\n|------|---|---|\n|탐색대상|인덱스이름|정수형위치|\n|범위지정|가능(범위끝포함)|가능(범위끝제외)|\n|테스트1|loc['a':'c'] = 'a','b','c'|iloc[1:4] = 1,2,3|\n\n\n```python\ndf.loc[\"1\"]\n```\n\n\n\n\n    회사ID1     1232134\n    회사ID2     5839204\n    회사ID3    13224213\n    Name: 1, dtype: object\n\n\n\n\n```python\ndf.loc[\"1\":\"3\"]\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>회사ID1</th>\n      <th>회사ID2</th>\n      <th>회사ID3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ndf.loc[[\"1\",\"3\"]]\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>회사ID1</th>\n      <th>회사ID2</th>\n      <th>회사ID3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n## 열 선택 \n- 열 1개만 선택할때: df[\"열 이름\"] or df.열 이름\n- 열을 여러개 선택할때: df[[\"\",\"\"]]\n\n\n```python\ndf[\"회사ID1\"]\n```\n\n\n\n\n    1    1232134\n    2    1232134\n    3    1232134\n    Name: 회사ID1, dtype: object\n\n\n\n\n```python\ndf[[\"회사ID1\",\"회사ID2\"]]\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>회사ID1</th>\n      <th>회사ID2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>1232134</td>\n      <td>5839204</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1232134</td>\n      <td>5839204</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1232134</td>\n      <td>5839204</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n## 원소 선택 \n- 행 인덱스와 열 이름을 [행,열]형식의 2차원 좌표로 입력한다. \n    - 인덱스 이름 방식: 데이터프레임.loc[행 인덱스, 열 번호]\n    - 정수 위치 인덱스 방식: 데이터프레임.iloc[행 번호, 열 번호]\n\n\n```python\ndf.loc[\"2\",\"회사ID2\"] #df.loc[2][\"회사ID\"]와 같음. 하지만 여러 행,열 설정을 해주기 위해선 리스트로 묶어줘야함. \n```\n\n\n\n\n    '5839204'\n\n\n\n\n```python\ndf.loc[[\"1\",\"3\"], [\"회사ID1\",\"회사ID3\"]]\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>회사ID1</th>\n      <th>회사ID3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>1232134</td>\n      <td>13224213</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1232134</td>\n      <td>13224213</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ndf.loc[\"1\":\"3\", [\"회사ID1\",\"회사ID3\"]]\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>회사ID1</th>\n      <th>회사ID3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>1232134</td>\n      <td>13224213</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1232134</td>\n      <td>13224213</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1232134</td>\n      <td>13224213</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n## 행 추가\n- df.loc[인덱스 이름] = 데이터값 또는 리스트\n\n\n```python\ndf.loc[\"4\"] = [\"2324124\",\"1314213\",\"124214123\"] #df에 변화가 바로 적용\n```\n\n\n```python\ndf\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>회사ID1</th>\n      <th>회사ID2</th>\n      <th>회사ID3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2324124</td>\n      <td>1314213</td>\n      <td>124214123</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n## 열 추가\n- df[\"새로운 열 이름\"] = 데이터값 또는 리스트\n\n\n```python\ndf[\"회사ID4\"] = [\"423\",\"23532\",\"235\",\"8679\"] #df에 변화가 바로 적용\n```\n\n\n```python\ndf\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>회사ID1</th>\n      <th>회사ID2</th>\n      <th>회사ID3</th>\n      <th>회사ID4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n      <td>423</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n      <td>23532</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n      <td>235</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2324124</td>\n      <td>1314213</td>\n      <td>124214123</td>\n      <td>8679</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n## 원소 값 변경\n- df.loc[\"행 이름\"][\"열 이름\"] = 새로운 값\n- df.iloc[\"행 번호\"][\"열 번호] = 새로운 값\n\n\n```python\ndf.loc[\"1\"][\"회사ID1\"] = 3 #df에 변화가 바로 적용\n```\n\n\n```python\ndf.loc[\"1\"][\"회사ID1\":\"회사ID4\"] = 3 #df에 변화가 바로 적용\n```\n\n\n```python\ndf\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>회사ID1</th>\n      <th>회사ID2</th>\n      <th>회사ID3</th>\n      <th>회사ID4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n      <td>23532</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n      <td>235</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2324124</td>\n      <td>1314213</td>\n      <td>124214123</td>\n      <td>8679</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n## 특정 열을 행 인덱스로 설정 \n- df.set_index([\"열 이름들\"])\n- df.set_index(\"열 이름\")\n\n## 행 인덱스 재배열 \n- 기존 객체를 변경하지 않고 새로운 데이터프래임 객체를 반환한다\n\n\n```python\nnew_obj = ['comp_row1','comp_row2','comp_row3','comp_row4'] #df에 변화가 바로 적용\ndf_new = df.reindex(new_obj)\n```\n\n\n```python\ndf_new\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>회사ID1</th>\n      <th>회사ID2</th>\n      <th>회사ID3</th>\n      <th>회사ID4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>comp_row1</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>comp_row2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>comp_row3</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>comp_row4</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### 재배열된 df_new 변수에 값 할당\n\n\n```python\ndf_new.loc[\"comp_row1\":\"comp_row4\"][\"회사ID1\"] = [\"31\",\"34\",\"213\",\"421\"]\n\n```\n\n\n```python\ndf_new\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>회사ID1</th>\n      <th>회사ID2</th>\n      <th>회사ID3</th>\n      <th>회사ID4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>comp_row1</th>\n      <td>31</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>comp_row2</th>\n      <td>34</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>comp_row3</th>\n      <td>213</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>comp_row4</th>\n      <td>421</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ndf\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>회사ID1</th>\n      <th>회사ID2</th>\n      <th>회사ID3</th>\n      <th>회사ID4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n      <td>23532</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n      <td>235</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2324124</td>\n      <td>1314213</td>\n      <td>124214123</td>\n      <td>8679</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n## 행 인덱스 초기화\n- df.reset_index()\n\n## 행 인덱스를 기준으로 데이터 정렬 \n- df.sort_index(ascending = True 또는 False)\n\n\n```python\ndf.sort_index(ascending = False)\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>회사ID1</th>\n      <th>회사ID2</th>\n      <th>회사ID3</th>\n      <th>회사ID4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>2324124</td>\n      <td>1314213</td>\n      <td>124214123</td>\n      <td>8679</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n      <td>235</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n      <td>23532</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n## 열 인덱스를 기준으로 데이터 정렬 \ndf. sort_values(by = \"열이름\", ascending True 또는 False)\n\n\n```python\ndf[\"회사ID1\"] = df[\"회사ID1\"].astype(int)\n```\n\n\n```python\ndf.sort_values(by = \"회사ID1\", ascending=False)\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>회사ID1</th>\n      <th>회사ID2</th>\n      <th>회사ID3</th>\n      <th>회사ID4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>2324124</td>\n      <td>1314213</td>\n      <td>124214123</td>\n      <td>8679</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n      <td>23532</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1232134</td>\n      <td>5839204</td>\n      <td>13224213</td>\n      <td>235</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n# 산술연산 \n- 판다스의 산술 연산은 3단계를 거친다. \n    1. 행/열 인덱스를 기준으로 모든 원소를 정렬한다.\n    2. 동일한 위치에 있는 원소끼리 일대일로 대응시킨다. \n    3. 일대일 대응되는 원소끼리 연산을 처리한다. \n    4. 대응되는 원소가 없다면 nan으로 처리한다.\n\n## 시리즈 (+-*/) 숫자\n- 시리즈 객체에 어떤 숫자를 연산하면 시리즈의 개별 원소에 각각 적용된 객체로 반환된다. \n\n\n```python\nd = {\"index1\":1,\"index2\":2,\"index3\":3}\nsr2 = pd.Series(d)\ndisplay(sr2)\n```\n\n\n    index1    1\n    index2    2\n    index3    3\n    dtype: int64\n\n\n\n```python\nsr2+2 #sr2에 바로 적용 안됨. \n```\n\n\n\n\n    index1    3\n    index2    4\n    index3    5\n    dtype: int64\n\n\n\n## 시리즈 (+-*/) 시리즈\n- 시리즈가 다른 시리즈와 연산할때 같은 인덱스끼리 연산하다. \n- 인덱스가 정렬이 안되어있다해도 판다스는 알아서 같은 인덱스를 찾아 연산한다. \n- 연산을 하는 두 시리즈의 크기가 다르거나 크기가 같더라도 인덱스가 다르다면 판단스는 유효한 같이 없다고 생각하여 nan을 추출한다. \n\n### 시리즈 크기가 같고 인덱스도 같은 상황\n\n\n```python\nd = {\"index1\":4, \"index2\":9, \"index3\":10}\nsr3 = pd.Series(data=d)\n```\n\n\n```python\nsr2+sr3\n```\n\n\n\n\n    index1     5\n    index2    11\n    index3    13\n    dtype: int64\n\n\n\n### 시리즈 크기는 같은데 인덱스가 다른 상황\n\n\n```python\nd = {\"index4\":3, \"index5\":1, \"index6\":3}\nsr4 = pd.Series(data=d)\n```\n\n\n```python\nsr3+sr4\n```\n\n\n\n\n    index1   NaN\n    index2   NaN\n    index3   NaN\n    index4   NaN\n    index5   NaN\n    index6   NaN\n    dtype: float64\n\n\n\n### 시리즈 크기는 다르고 인덱스는 같은 상황\n\n\n```python\nd = {\"index1\":4, \"index2\":23490, \"index3\":33,\"index4\":123}\nsr5 = pd.Series(data = d)\n```\n\n\n```python\nsr2+sr5\n```\n\n\n\n\n    index1        5.0\n    index2    23492.0\n    index3       36.0\n    index4        NaN\n    dtype: float64\n\n\n\n## 연산 메소드\n- 객체 사이의 공통된 인덱스가 없거나 Nan이 포함된 경우 연산 결과가 Nan이 반환되는데 이를 방지하기 위해서 메소드안에 fill_value 옵션을 써준다.\n- 덧셈: 시리즈객체1.add(시리즈객체2, fill_value=0)\n- 뺄셈: 시리즈객체1.sub(시리즈객체2, fill_value=0)\n- 곱셈: 시리즈객체1.mul(시리즈객체2, fill_value=0)\n- 나눈셈: 시리즈객체1.div(시리즈객체2, fill_value=0)\n\n\n```python\nsr2.add(sr4, fill_value=0)\n```\n\n\n\n\n    index1    1.0\n    index2    2.0\n    index3    3.0\n    index4    3.0\n    index5    1.0\n    index6    3.0\n    dtype: float64\n\n\n\n\n```python\nsr3.sub(sr2, fill_value=0)\n```\n\n\n\n\n    index1    3\n    index2    7\n    index3    7\n    dtype: int64\n\n\n\n\n```python\nsr3\n```\n\n\n\n\n    index1     4\n    index2     9\n    index3    10\n    dtype: int64\n\n\n\n# 데이터 입출력\n\n## CSV\n\n### CSV파일 불러오기 \n- pd.read_csv('파일경로/파일이름.csv')\n\n### CSV로 저장하기\n- 데이터프레임.to_csv('파일경로/파일이름.csv')\n\n## Excel\n\n### Excel 파일 불러오기\n- pandas.read_excel('파일경로/파일이름.xlsx')\n\n### Excel 파일로 저장하기 \n- 데이터프레임.to_excel('파일경로/파일이름.xlsx')\n\n### 여러개의 데이터프레임을 한개의 excel파일로 저장\n- writer = pandas.ExcelWriter(\"파일경로/파일이름.xlsx\")\n- df1.to_excel(writer, sheet_name=\"sheet1\")\n- df2.to_excel(writer, sheet_name=\"sheet2\")\n- writer.save()\n\n## Json\n\n### Json 파일 불러오기\n- pandas.read_json('파일경로/파일이름.json')\n\n### Json 파일로 저장하기\n- df.to_json('파일경로/파일명.json')\n\n## HTML\n\n### HTML 파일 불러오기 \n- 웹에 있는 <table> 태그가 붙은 \n- pandas.read_html('웹주소 url')\n- pandas.read_html('파일경로/파일명.html')\n\n# 데이터 살펴보기\n\n## 각 열의 개수 \n- count() 메서드는 데이터프레임의 각 열이 가지고 있는 데이터 개수를 시리즈 객체로 반환한다. \n- 데이터프레임.count() --> 데이터프레임을 이루고 있는 열의 개수를 시리즈 객체로 반환한다.\n\n## 각 열의 고윳값 개수\n- value_counts() 메서드는 시리즈 객체의 고윳값 개수를 세는데 사용한다. \n- dropna=True 옵션을 사용하면 nan값을 제외하고 숫자를 센다. \n- dropna=False가 기본값이다.\n데이터프레임[\"열이름\"].value_counts()\n\n\n```python\nimport pandas as pd\nimport numpy as np\n```\n\n\n```python\ndata = {\"A\": [1,2,3,4,5],\"B\":[3,59,30,1,2],\"C\":[\"dw\",\"vc\",\"qw\",\"bb\",\"ll\"]}\ndf = pd.DataFrame(data)\n```\n\n\n```python\ndf.count() #전체 데이터의 열이 가지고 있는 갯수 \n```\n\n\n\n\n    A    5\n    B    5\n    C    5\n    dtype: int64\n\n\n\n\n```python\ndf[\"A\"].value_counts() #한 열이 가지고 있는 value값들의 고유 갯수 counting \n```\n\n\n\n\n    5    1\n    4    1\n    3    1\n    2    1\n    1    1\n    Name: A, dtype: int64\n\n\n\n# 통계 함수 적용 \n\n## 평균값 \n- 데이터프레임에 mean()메서드를 적용하면, 산술 데이터를 갖는 모든 열의 평균값을 각각 계산하여 시리즈 객체로 반환한다. \n- df.mean() df의 열 평균을 계산 \n- df[\"열이름\"].mean() 선택 받은 열의 평균 계산.\n\n## 중간값\n- 데이터프레임에 median()메서드를 적용하면, 산술 데이터를 갖는 모든 열의 중간값을 각각 계산하여 시리즈 객체로 반환한다. \n- 데이터프레임의 특정 열을 선택하여 중간 값을 계산할 수도 있다. \n- df.median()\n- df[\"열이름\"].median()\n\n## 최대값\n- 데이터프레임에 max() 메서드를 적용하면 데이터프레임의 각 열이 갖는 데이터값 중에서 최대값을 계산하여 시리즈로 반환한다. \\\n- 특정열을 선책하여 계산할 수도 있다. \n- 문자열 데이터는 아스키코드로 크고 작음을 비교한다. \n- 모든 열의 최대값: df.max()\n- 특정 열의 최대값: df[\"열 이름\"].max()\n\n\n```python\ndf\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>3</td>\n      <td>dw</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>59</td>\n      <td>vc</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>30</td>\n      <td>qw</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>bb</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>2</td>\n      <td>ll</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ndf.max()\n```\n\n\n\n\n    A     5\n    B    59\n    C    vc\n    dtype: object\n\n\n\n\n```python\ndf[\"A\"].max()\n```\n\n\n\n\n    5\n\n\n\n\n```python\ndf[[\"A\",\"B\"]].max()\n```\n\n\n\n\n    A     5\n    B    59\n    dtype: int64\n\n\n\n## 최소값\n- 데이터프레임에 min() 메서드를 적용하면 데이터프레임의 각 열이 갖는 데이터값 중에서 최소값을 계산하여 시리즈 형태로 반환한다. \n- 특정열을 계산할 수도 있다. \n- 문자열 데이터는 아스키코드로 크고 작음을 계산한다. \n- 모든 열의 최소값: 데이터프레임객체.min()\n- 특정 열의 최소값: 데이터프레임객치[\"열값\"].min()\n\n## 표준편차\n- 데이터프레임에 std() 메서드를 적용하면 산술 데이터를 갖는 열의 표준편차를 계산하여 시리즈로 반환한다. \n- 특정열만 계산할 수도 있다. \n- 문자열 데이터는 비교하지 않는다. \n- df.std()\n- df[\"열이름\"].std()\n\n## 상관계수 \n- 데이터프레임에 corr()메서드를 적용하면 두 열간의 상관계수를 계산한다. \n- 산술 데이터를 갖는 모든 열에 대해 2개씩 서로 짝을 짓고, 각각의 경우에 대하여 상관계수를 계산한다. \n- 문자열 데이터는 계산이 불가능하기때문에 포함하지 않는다. \n- df.corr()\n- df.[[\"열이름\",\"열이름]].corr()\n\n\n```python\ndf.corr()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>A</th>\n      <td>1.000000</td>\n      <td>-0.372822</td>\n    </tr>\n    <tr>\n      <th>B</th>\n      <td>-0.372822</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ndf[[\"A\",\"B\"]].corr()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>A</th>\n      <td>1.000000</td>\n      <td>-0.372822</td>\n    </tr>\n    <tr>\n      <th>B</th>\n      <td>-0.372822</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n# 판다스 내장 그래프 도구 활용 \n- 시리즈 또는 데이터프레임 객체에 plot()메서드를 적용하여 그래프를 그린 뒤, kind 옵션으로 종류를 선택한다.\n\n\n|kind 옵션|설명|kind 옵션|설명|\n|------|---|---|---|\n|'line'|선 그래프|'kde'|커널 밀도 그래프|\n|'bar'|수직 막대 그래프|'area'|면적 그래프|\n|'barh'|수평 막대 그래프|'pie'|파이 그래프|\n|'his'|히스토그램|'scatter'|산점도 그래프|\n|'box'|'박스 그래프'|'hexbin'|고밀도 산점도 그래프|\n\n## 선 그래프\n- 데이터프래임 객체에 plot()메서드를 적용할 때 다른 옵션을 추가하지 않으면 가장 기본적인 선 그래프를 그린다. \n- 선 그래프: 데이터프레임객체.plot()\n\n##  막대 그래프\n- plot()메스드 안에 kind=\"bar\"옵션을 추가한다.\n- 막대그래프 : 데이터프레임객체.plot(kind=\"bar\")\n\n## 히스토그램\n- plot()메서드 안에 kind=\"hist\"옵션을 추가한다\n- 히스토그램: 데이터프레임객체.plot(kind=\"hist\")\n\n\n```python\ndf.plot(kind=\"hist\")\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x11910b7d0>\n\n\n\n\n![png](pandas_dataframe_writtenby_SeungHwanOh_files/pandas_dataframe_writtenby_SeungHwanOh_114_1.png)\n\n\n## \n\n## 산점도\n- df.plot(x=\"특정 열\", y=\"특정 열\", kind=\"scatter\")\n\n\n```python\ndf.plot(x='A', y='B', kind=\"scatter\")\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x11a2fb250>\n\n\n\n\n![png](pandas_dataframe_writtenby_SeungHwanOh_files/pandas_dataframe_writtenby_SeungHwanOh_117_1.png)\n\n\n## 박스플롯\n- plot()메서드 안에 kind=\"box\"옵션을 입력한다. \n- 박스플롯을 통해 'o'표시를 통해 이상값을 확인할 수 있다. \n- 박스플롯: 데이터프레임['열 이름'.'열 이름', ~].plot(kind=\"box\")\n- 이때 하나만 보고 싶다면 데이터프레임에 컬럼을 하나만 지정하면 된다. \n\n# 시각화 도구\n\n## Matplotlib - 기본 그래프 도구\n### 선 그래프\n    - 선 그래프는 연속하는 데이터 값들을 직선 또는 곡선으로 연결하여 데이터 값 사이의 관계를 나타낸다\n    - 특히 시계열 데이터와 같이 연속적인 값의 변화와 패턴을 파악하는데 적합하다.\n    - 선 그래프는 기본 옵션이기 때문에 옵션을 설정하지 않고 plot 함수를 쓰면 선 그래프가 나온다.\n    \n    1. 스타일 서식 지정\n    plt.style.use('ggplot')\n    \n    2. 그림 사이즈 지정\n    plt.figure(figsize=(가로숫자,세로숫자))\n    \n    3. x축, y축 데이터를 plot 함수에 입력 --> 시리즈의 인덱스를 x축 데이터로, 데이터값을 y축데이터로 전달\n    plt.plot(x축, y축, marker=\"지정 알파벳\", markersize=숫자입력)\n    #판다스 객체 자체를 plot함수에 입력하는 것도 가능하다. \n    \n    4. 그래프 객체에 차트 제목을 추가할 때 title()함수를 이용한다.\n    plt.title(\"제목 입력\", size=숫자) \n    \n    5. 축 이름 추가 \n    plt.xlabel(\"x축 이름\", size=숫자)\n    plt.ylabel(\"y축 이름\", size=숫자)\n    \n    6. matplotlib 한글 문제 해결 --> 해당 코드를 그대로 쓰면 된다.\n    from matplotlib import font_manager, rc \n    font_path = \"./폰트파일위치/폰트.ttf\"\n    font_name = font_manager.FontProperties(fname=font_path).get_name()\n    rc('font', family=font_name)\n    \n    7. x축, y축 범위 지정 (최솟값, 최댓값)\n    plt.xlim(최솟값, 최댓값)\n    plt.ylim(최솟값, 최댓값) \n    \n    8. x축 눈금 라벨 회전 / vertical 대신 숫자를 입력해도 된다.\n    plt.xsticks(rotation= \"vertical\")\n    \n    9. 범례표시 / best는 최적의 위치를 선정해주는 자동기능이다. \n    plt.legend(labels=[\"범례 이름\"], loc=\"best\", fontsize=숫자)\n    \n    10. 그래프 출력\n    plt.show()  \n\n# 데이터 사전 처리\n\n## 누락 데이터 처리\n    - 유효한 데이터 값이 존재하지 않는 누락 데이터를 NaN으로 표시한다. \n    - 누락 데이터 확인\n        - df.info()메서드로 데이터프레임 요약정보를 출력하면 NaN 값의 개수를 보여준다. \n        - df[\"열\"].value_counts() 메서드로 특정 열의 누락 데이털르 확인할 수 있다. \n            - 이때 누락 데이터의 개수를 확인하려면 반드시 dropna = False라는 옵션을 적용해야 한다. 그렇지 않으면 NaN값을 제외하고 유요한 데\n              이터 개수만을 구한다.\n        - df.isnull()메서드와 notnull()메서드를 통해 직접적으로 누락 데이터를 찾을 수 있다. \n            - isnull(): 누락데이터라면 True 반환, 유효한 데이터면 False를 반환\n            - notnull(): 유효한 데이터면 True 반환, 누락 데이터면 False를 반환\n            - 이때 True는 1로 계산되고 False는 0으로 판별되기 때문에, sum(axis=0) 메소드를 활용하여 True(1)의 합을 구할 수 있다. \n                - print(df.head().isnull().sum(axis=0))\n\n## 누락 데이터 제거\n    - dropna() 메서드를 적용해 NaN 값을 갖는 행 또는 열을 삭제할 수 있다. \n    - subset옵션으로 열을 한정할 수 있다.\n    - how 옵션으로 NaN값에 따라 삭제 조건을 줄 수 있다.\n    - 누락 데이터 삭제(기준점): 데이터프레임객체.dropna(axis=0 또는 1, thresh=n)\n    - 누락 데이터 삭제(조건): 데이터프레임객체.dropna(subset=['열 이름'], how='any' or 'all', axis =0 또는 1)\n    이때 n은 결측치가 n개 이상인 행 또는 열을 삭제하라는 기준점을 주는 것이다.\n    how 옵션의 any는 NaN가 하나라도 존재하는 행 또는 열을 삭제하라는 의미고, all은 모든 데이터가 NaN인 경우에만 삭제하라는 의미다. \n\n\n```python\nimport seaborn as sns\ndf = sns.load_dataset('titanic')\n```\n\n\n```python\n#각 열의 NaN 개수를 계산하기 위해서 for 반복문으로 각 열의 NaN 개수 계산하기. \nmissing_df = df.isnull()\nfor col in missing_df.columns:\n    missing_count = missing_df[col].value_counts()\n    try:\n        print(col,\":\", missing_count[True]) #NaN값이 있으면 개수 출력\n    except:\n        print(col,\":\", 0) #Nan값이 없으면 0개 출력\n```\n\n    survived : 0\n    pclass : 0\n    sex : 0\n    age : 177\n    sibsp : 0\n    parch : 0\n    fare : 0\n    embarked : 2\n    class : 0\n    who : 0\n    adult_male : 0\n    deck : 688\n    embark_town : 2\n    alive : 0\n    alone : 0\n\n\n\n```python\ndf_thres = df.dropna(axis=1, thresh=500)\n```\n\n\n```python\nprint(df_thres.columns)\n```\n\n    Index(['survived', 'pclass', 'sex', 'age', 'sibsp', 'parch', 'fare',\n           'embarked', 'class', 'who', 'adult_male', 'embark_town', 'alive',\n           'alone'],\n          dtype='object')\n\n\n891명의 승객중에서 177명의 나이에 대한 데이터가 없다. 승객의 나이가 데이터 분석의 중요한 변수라면, 나이 데이터가 없는 승객의 레코드(행)를 제거하는 것이 좋다. dropna() 메소드에 subset을 'age'열로 한정하면 'age'열의 행 중에서 NaN값이 있는 모든 행(axis=0)을 삭제한다. 기본값으로 how=\"any\" 옵션이 적용되는데, NaN값이 하나라도 존재하면 삭제한다는 뜻이다. how=\"all\" 옵션으로 입력하면 모든 데이터가 NaN값일 경우에만 삭제가 된다. 예제에서는 891개의 행 중에서 나이 데이터가 누락된 177개 행을 삭제하고 나머지 714개의 행을 df_age에 저장한다\n\n\n```python\ndf_age = df.dropna(subset=[\"age\"], how=\"any\", axis=0)\n```\n\n\n```python\nmissing_data = df_age.isnull()\nfor col in missing_data.columns:\n    eda = missing_data[col].value_counts()\n    try:\n        print(col, \":\",eda[True])\n    except:\n        print(col, \":\",0)\n```\n\n    survived : 0\n    pclass : 0\n    sex : 0\n    age : 0\n    sibsp : 0\n    parch : 0\n    fare : 0\n    embarked : 2\n    class : 0\n    who : 0\n    adult_male : 0\n    deck : 530\n    embark_town : 2\n    alive : 0\n    alone : 0\n\n\n## 누락 데이터 치환 \n    - 누락 데이터를 바꿔서 대체할 값으로는 데이터의 분포와 특성을 잘 나타낼 수 있는 평균값, 최빈값 등을 활용한다. \n    - 판다스에서는 fillna() 메소드를 상ㅇ한다.\n    - 원본 객체를 변경하려면 inplace = True옵션을 추가해야 한다. \n    - 평균(Mean)으로 누락 데이터를 바꿔주는 방법을 알아보자. 앞의 예제처럼 승객의 나이 데이터가 누락된 행을 제거하지 않고, 대신 'age'열의 나머\n    지 승객의 평균 나이로 치환하다. 먼저 'age'열에 들어있는 값들의 평균을 계산하여 mean_age에 저장한다. mean() 메소드를 적용하면 NaN을 제외\n    하고 평균을 계산한다. fillna() 메소드에 mean_age를 인자로 전달하면 NaN을 찾아서 mean_age값으로 치환한다. \n    \n\n### 정수형 데이터\n\n\n```python\nimport seaborn as sns \ndf = sns.load_dataset('titanic')\nprint(df['age'].head(10))\nprint('\\n')\nmean_age = df['age'].mean(axis=0)\ndf[\"age\"].fillna(mean_age, inplace=True)\n\n#age 열의 첫 10개 데이터 출력(5행에 NaN값이 평균으로 대체)\nprint(df['age'].head(10))\n```\n\n### 범주화 데이터\n승선도시를 나타내는 'embark_town'열에 있는 NaN을 다른 값으로 바꾼다. 승객들이 가장 많이 승선한 도시의 이름을 찾아서 NaN을 치환한다. 먼저 value_counts() 메소드를 사용하여 승선도시별 승객 수를 찾고, idxmax() 메소드로 가장 큰 값을 갖는 도시를 찾는다. 실행 결과에서 829행의 NaN값을 포함해서 누락 데이터들은 Southamption으로 변경한다\n\n\n```python\nimport seaborn as sns\n\ndf = sns.load_dataset('titanic')\n\n# embark_town 열의 829행의 NaN 데이터 출력\nprint(df['embark_town'][825:830])\nprint('\\n')\n\n# embark_town 열의 NaN값을 승선도시 중에서 가장 많이 출현한 값으로 치환하기. \nmost_freq = df[\"embark_town\"].value_counts(dropna=True).idxmax()\nprint(most_freq)\nprint('\\n')\n\ndf['embark_town'].fillna(most_freq, inplace=True)\n\n#embark_town열 829행의 NaN 데이터 출력(NaN값이 most_freq값으로 대체)\nprint(df['embark_town'][825:830])\n```\n\n    825     Queenstown\n    826    Southampton\n    827      Cherbourg\n    828     Queenstown\n    829            NaN\n    Name: embark_town, dtype: object\n    \n    \n    Southampton\n    \n    \n    825     Queenstown\n    826    Southampton\n    827      Cherbourg\n    828     Queenstown\n    829    Southampton\n    Name: embark_town, dtype: object\n\n\n#### 누락 데이터가 표시가 안될때\n\n누락 데이터가 NaN으로 표시되지 않은 경우\n    - 데이터셋 중에는 누락 데이터가 NaN으로 입력되지 않은 경우도 많다. 예를 들면, 숫자 0이나 문자 '-','?' 같은 값으로 입력되기도 한다. 판다스에서 누락 데이터를 다루려면 replace() 메소드를 활용하여 NumPy에서 지원하는 np.nan으로 변경해주는 것이 좋다. 단, np.nan을 사용하기 위해서는 \"import numpy as np\"와 같이 NumPy라이브러리를 먼저 임포트해야 한다. \n        - 사용법: df.replace('?', np.nan, inplace=True)\n        - nan외의 다른 누락값이 있나 확인법: unicon.apply(lambda x: \"?\" in list(x), axis=1 )\n\n#### 범주화 데이터 특성을 이용한 결측치 치환\n데이터셋의 특성상 서로 이웃하고 있는 데이터끼리 유사성을 가질 가능성이 높다. 이럴 때는 앞이나 뒤에서 이웃하고 있는 값으로 치환해 주는 것이 좋다. fillna() 메소드에 method='ffill' 옵션을 추가하면 NaN이 있는 행의 직전 행에 있는 값으로 바꿔준다. method='bfill' 옵션을 사용하면 NaN이 있는 행의 바로 다음 행에 있는 값을 가지고 치환한다. 다음의 예제에서는 'ffill'옵션을 사용하여 829행의 NaN값을 바로 앞에 위치한 828행의 Queenstown으로 변경한다. \n\n\n```python\nimport seaborn as sns\ndf = sns.load_dataset('titanic')\ndf['embark_town'].fillna(method='ffill', inplace=True)\n```\n\n\n```python\ndf['embark_town'].value_counts(dropna=True)\n```\n\n\n\n\n    Southampton    644\n    Cherbourg      169\n    Queenstown      78\n    Name: embark_town, dtype: int64\n\n\n\n# 중복 데이터 처리 \n\n## 중복 데이터 확인\n    - 동일한 관측값이 중복되는지 여부, 즉 행의 레코드가 중복되는지 여부를 확인하려면 duplicated()메소드를 이용한다. 전에 나온 행들과 비교하여 \n    중복되는 행이면 True를 반환하고, 처음 나오는 행에 대해서는 False를 반환한다.\n    - 데이터프레임에 duplicated() 메소드를 적용하면 각 행의 중복 여부를 나타내는 불린 시리즈를 반환한다. \n    - 0행의 데이터는 뒤에 나오는 1행의 데이터와 같지만 처음 나오는 값이다. 즉, 앞에 비교할 데이터가 아예없기 때문에 중복이 아니라는 뜻에서 False\n    로 판정한다. 1행의 데이터는 앞의 0행과 중복되기 때문에 True가 된다.\n\n\n```python\nimport pandas as pd \ndf = pd.DataFrame(\n{'c1':['a','a','b','a','b'],\n 'c2':[1,1,1,2,2],\n 'c3':[1,1,2,2,2]})\nprint(df)\nprint('\\n')\n\ndf_dup = df.duplicated()\nprint(df_dup)\nprint('\\n')\n```\n\n      c1  c2  c3\n    0  a   1   1\n    1  a   1   1\n    2  b   1   2\n    3  a   2   2\n    4  b   2   2\n    \n    \n    0    False\n    1     True\n    2    False\n    3    False\n    4    False\n    dtype: bool\n    \n    \n\n\n데이터프레임의 열은 시리즈 객체이므로, duplicated() 메소드를 적용할 수 있다. 데이터프레임 dfdml 'c2'열은 정수 1과 2로 구성된다. 1이 처음 나타난 0행과 2가 처음 나타난 3행을 제외하고 나머지 1,2,4행은 이전에 나온 행과 중복되므로 True가 된다. 1,2행은 데이터 1을 가진 0행과 중복되고, 4행은 데이터 2를 가진 3행과 중복된다. \n\n\n```python\ncol_dup = df['c2'].duplicated()\nprint(col_dup)\n```\n\n    0    False\n    1     True\n    2     True\n    3    False\n    4     True\n    Name: c2, dtype: bool\n\n\n## 중복 데이터 제거\n\n중복 데이터를 제거하는 명령에는 drop_duplicates() 메소드가 있다. 중복되는 행을 제거하고 고유한 관측값을 가진 행들만 남긴다. 원본 객체를 변경하려면 inplace=True 옵션을 추가한다. 다음 예제에서 1행의 데이터는 앞에 이웃하고 있는 0행의 데이터와 중복되므로 제거된다. \n\n\n```python\nimport pandas as pd \ndf=pd.DataFrame({\n    \"c1\":['a','a','b','a','b'],\n    \"c2\":[1,1,1,2,2],\n    \"c3\":[1,1,2,2,2]  \n})\nprint(df)\nprint('\\n')\n```\n\n      c1  c2  c3\n    0  a   1   1\n    1  a   1   1\n    2  b   1   2\n    3  a   2   2\n    4  b   2   2\n    \n    \n\n\n\n```python\ndf2 = df.drop_duplicates()\nprint(df2)\nprint('\\n')\n```\n\n      c1  c2  c3\n    0  a   1   1\n    2  b   1   2\n    3  a   2   2\n    4  b   2   2\n    \n    \n\n\ndrop_duplicates() 메소드의 subset 옵션에 \"열 이름의 리스트\"를 전달할 수 있다. 데이터의 중복여부를 판별할 때, subset 옵션에 해당하는 열을 기준으로 판단한다. 데이터프레임 df의 'c2','c3' 열을 기준으로 판별하면 0행과 1행, 3행과 4행의 데이터가 각각 중복된다. \n\n\n```python\ndf3 = df.drop_duplicates(subset=['c2','c3'])\nprint(df3)\n```\n\n      c1  c2  c3\n    0  a   1   1\n    2  b   1   2\n    3  a   2   2\n\n\n## 데이터 표준화 \n\n\n```python\n\n```\n\n# 코드 실제 예시\n\n## 특정 컬럼 갯수가 일정 수준의 갯수를 넘겨야 True되는 코드\n\n\n```python\n# 데이터가 일정 개수 이상 존재하는 회사만 남긴다.\n#df = df.groupby(\"회사ID\").filter(lambda x : len(x) > 24\n```\n\n## 특정 컬럼의 조건이 True인 전체 데이터 조회\n\n\n```python\n#df = df.loc[df[\"연매출액\"]>70000000]\n#df = df[df[\"연매출액\"]>70000000] 같은 코드. \n#df = df[df['월별_직원수']>=400]\n#특정 조건에 맞는 전체 데이터를 출력하기 위해선 df[df[조건]]\n```\n\n## 새로운 열에 리스트로 값 추가\n\n\n```python\n# new_df[\"연매출액_변화량\"] = change_sales_columns #여기서 change_sales_columns는 리스트 형태입니다.\n```\n\n## Unique()함수는 반환값을 리스트로 돌려준다. \n\n\n```python\n#check_id_list = check_df['회사ID'].unique()\n#for을 돌릴 수 있다.\n```\n\n[126814 294387 294337 126521 294367 126538 439986 126674 126516 507086\n 126664 403351 126983 227414 126606 126831 510329 227415 403359 403434\n 469458 419998 126802 419945 419977 126772 403462 127065 469473 469677\n 127090 127060 420046 420008 294530 403470]\n\n\n```python\n# # 연매출액 변화가 없는 회사 ID 제거\n# # 기존 리스트를 for문을 돌면서 조건에 만족한 데이터만 리스트 필터링\n# # 필터링된 리스트를 다시 for문을 돌면서 필터링. \n# change_sales_list = []\n# for x in check_id_list :\n#     new_df = check_df[check_df['회사ID']==x]\n#     if sum(new_df['연매출액_변화량']) > 10000000 : # 연매출액 성장 100억 이상\n#         change_sales_list.append(x) \n# print(len(change_sales_list), \"개의 회사가 연매출액이 증가했습니다.\")\n# print(change_sales_list)\n# # 직원수 변화가 없는 회사 ID 제거\n\n# change_worker_list = []\n# for z in change_sales_list :\n#     worker_df = check_df[check_df['회사ID']==z]\n#     if sum(worker_df['월별_직원수_변화량']) > 30 : # 직원수 30명 이상\n#         change_worker_list.append(z)   \n# print(len(change_worker_list), \"개의 회사의 직원수가 증가했습니다.\")  \n# print(change_worker_list)\n```\n","excerpt":"시리즈 인덱스는 데이터값과 일대일 매칭  데이터가 나열된 1차원 형식의 배열 형태 시리즈 생성 딕셔너리 데이터 생성 Sr = pd.Series(data=딕셔너리데이터이름, index=[]) 인덱스 구조 인덱스값 배열 시리즈 객체.index 데이터값 …","fields":{"slug":"/pandas_dataframe_writtenby_SeungHwanOh/"},"frontmatter":{"date":"May 08, 2021","title":"Pandas_Guide_For_Teammates","tags":["팀원모두취직","판다스정리","원티드취직","마이리얼트립취직","뱅크샐러드취직","토스취직","데이터분석가","데이터싸이언티스트","넘파이정리"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\"원티드 에듀\" 서류 지원했을 때 주어진 과제가 주가 데이터 분석이었다. <br>\n오늘 서류 면접 결과를 기다리면서 과제 프로젝트를 했을 때 혹시 데이터 탐색시 발견하지 못한 점이 있지 않은지 확인차 시각화하며 데이터를 음미(?)했다.<br>\n데이터를 보며 인사이트를 도출하는 과정만큼 희열을 주는 일을 찾기 힘든것같다. <br> 원티드 에듀 서류면접은 합격했다 :)\n\n\n```python\nimport pandas as pd\nimport seaborn as sns\n```\n\n\n```python\ndf = pd.read_csv('krx.csv', dtype={\"Symbol\":object})\n```\n\n## 전체 데이터 요약, 관계성, 타입, 행&열 갯수 분석\n\n- krx 컬럼 이름 해석 <br>\n{'회사명':'Name', <br>\n'종목코드':'Symbol', <br>\n'업종':'Sector', <br>\n'주요제품':'Industry', <br>\n'상장일':'ListingDate', <br>\n'결산월':'SettleMonth',  <br>\n'대표자명':'Representative', <br>\n'홈페이지':'HomePage', <br>\n'지역':'Region', }\n\n\n```python\ndf.shape\n```\n\n\n\n\n    (7211, 11)\n\n\n\n\n```python\n# head 로 위에 있는 데이터 일부만 가져옵니다.\ndf.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Symbol</th>\n      <th>Market</th>\n      <th>Name</th>\n      <th>Sector</th>\n      <th>Industry</th>\n      <th>ListingDate</th>\n      <th>SettleMonth</th>\n      <th>Representative</th>\n      <th>HomePage</th>\n      <th>Region</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>060310</td>\n      <td>KOSDAQ</td>\n      <td>3S</td>\n      <td>특수 목적용 기계 제조업</td>\n      <td>반도체 웨이퍼 캐리어</td>\n      <td>2002-04-23</td>\n      <td>03월</td>\n      <td>박종익, 김세완 (각자 대표이사)</td>\n      <td>http://www.3sref.com</td>\n      <td>서울특별시</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>095570</td>\n      <td>KOSPI</td>\n      <td>AJ네트웍스</td>\n      <td>산업용 기계 및 장비 임대업</td>\n      <td>렌탈(파렛트, OA장비, 건설장비)</td>\n      <td>2015-08-21</td>\n      <td>12월</td>\n      <td>이현우, 박대현</td>\n      <td>http://www.ajnet.co.kr</td>\n      <td>서울특별시</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>006840</td>\n      <td>KOSPI</td>\n      <td>AK홀딩스</td>\n      <td>기타 금융업</td>\n      <td>지주사업</td>\n      <td>1999-08-11</td>\n      <td>12월</td>\n      <td>채형석, 이석주(각자 대표이사)</td>\n      <td>http://www.aekyunggroup.co.kr</td>\n      <td>서울특별시</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>054620</td>\n      <td>KOSDAQ</td>\n      <td>APS홀딩스</td>\n      <td>기타 금융업</td>\n      <td>인터넷 트래픽 솔루션</td>\n      <td>2001-12-04</td>\n      <td>12월</td>\n      <td>정기로</td>\n      <td>http://www.apsholdings.co.kr</td>\n      <td>경기도</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>265520</td>\n      <td>KOSDAQ</td>\n      <td>AP시스템</td>\n      <td>특수 목적용 기계 제조업</td>\n      <td>디스플레이 제조 장비</td>\n      <td>2017-04-07</td>\n      <td>12월</td>\n      <td>김영주</td>\n      <td>http://www.apsystems.co.kr</td>\n      <td>경기도</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n# tail 로 아래 있는 데이터 일부만 가져옵니다.\ndf.tail()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Symbol</th>\n      <th>Market</th>\n      <th>Name</th>\n      <th>Sector</th>\n      <th>Industry</th>\n      <th>ListingDate</th>\n      <th>SettleMonth</th>\n      <th>Representative</th>\n      <th>HomePage</th>\n      <th>Region</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>7206</th>\n      <td>000547</td>\n      <td>KOSPI</td>\n      <td>흥국화재2우B</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>7207</th>\n      <td>000545</td>\n      <td>KOSPI</td>\n      <td>흥국화재우</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>7208</th>\n      <td>003280</td>\n      <td>KOSPI</td>\n      <td>흥아해운</td>\n      <td>해상 운송업</td>\n      <td>외항화물운송업(케미컬탱커)</td>\n      <td>1976-06-29</td>\n      <td>12월</td>\n      <td>이환구</td>\n      <td>http://www.heung-a.com</td>\n      <td>서울특별시</td>\n    </tr>\n    <tr>\n      <th>7209</th>\n      <td>037440</td>\n      <td>KOSDAQ</td>\n      <td>희림</td>\n      <td>건축기술, 엔지니어링 및 관련 기술 서비스업</td>\n      <td>설계 및 감리용역</td>\n      <td>2000-02-03</td>\n      <td>12월</td>\n      <td>정영균, 이목운, 허철호 (각자대표)</td>\n      <td>http://www.heerim.com</td>\n      <td>서울특별시</td>\n    </tr>\n    <tr>\n      <th>7210</th>\n      <td>238490</td>\n      <td>KOSDAQ</td>\n      <td>힘스</td>\n      <td>특수 목적용 기계 제조업</td>\n      <td>OLED Mask 인장기, OLED Mask 검사기 등</td>\n      <td>2017-07-20</td>\n      <td>12월</td>\n      <td>김주환</td>\n      <td>http://www.hims.co.kr</td>\n      <td>인천광역시</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ndf.sample()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Symbol</th>\n      <th>Market</th>\n      <th>Name</th>\n      <th>Sector</th>\n      <th>Industry</th>\n      <th>ListingDate</th>\n      <th>SettleMonth</th>\n      <th>Representative</th>\n      <th>HomePage</th>\n      <th>Region</th>\n      <th>ListingYear</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3695</th>\n      <td>045300</td>\n      <td>KOSDAQ</td>\n      <td>성우테크론</td>\n      <td>전자부품 제조업</td>\n      <td>리드프레임가공, 반도체 장비</td>\n      <td>2001-12-18</td>\n      <td>12월</td>\n      <td>박찬홍</td>\n      <td>http://www.swmv.co.kr</td>\n      <td>경상남도</td>\n      <td>2001.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n# info 로 요약 데이터를 봅니다.\ndf.info()\n```\n\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 7211 entries, 0 to 7210\n    Data columns (total 10 columns):\n     #   Column          Non-Null Count  Dtype \n    ---  ------          --------------  ----- \n     0   Symbol          7211 non-null   object\n     1   Market          7211 non-null   object\n     2   Name            7211 non-null   object\n     3   Sector          2438 non-null   object\n     4   Industry        2419 non-null   object\n     5   ListingDate     2438 non-null   object\n     6   SettleMonth     2438 non-null   object\n     7   Representative  2438 non-null   object\n     8   HomePage        2258 non-null   object\n     9   Region          2438 non-null   object\n    dtypes: object(10)\n    memory usage: 563.5+ KB\n\n\n\n```python\n# describe 로 기술통계값을 봅니다.\ndf.describe()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Symbol</th>\n      <th>Market</th>\n      <th>Name</th>\n      <th>Sector</th>\n      <th>Industry</th>\n      <th>ListingDate</th>\n      <th>SettleMonth</th>\n      <th>Representative</th>\n      <th>HomePage</th>\n      <th>Region</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>7211</td>\n      <td>7211</td>\n      <td>7211</td>\n      <td>2438</td>\n      <td>2419</td>\n      <td>2438</td>\n      <td>2438</td>\n      <td>2438</td>\n      <td>2258</td>\n      <td>2438</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>7211</td>\n      <td>3</td>\n      <td>7211</td>\n      <td>158</td>\n      <td>2264</td>\n      <td>1799</td>\n      <td>9</td>\n      <td>2319</td>\n      <td>2237</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>308100</td>\n      <td>KOSPI</td>\n      <td>미래FH92KOSPI200풋</td>\n      <td>특수 목적용 기계 제조업</td>\n      <td>기업인수합병</td>\n      <td>1976-06-30</td>\n      <td>12월</td>\n      <td>-</td>\n      <td>http://imt@kmaringroup.com</td>\n      <td>서울특별시</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1</td>\n      <td>5555</td>\n      <td>1</td>\n      <td>144</td>\n      <td>37</td>\n      <td>8</td>\n      <td>2378</td>\n      <td>5</td>\n      <td>2</td>\n      <td>987</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n# 중복을 제외한 unique 값의 갯수를 봅니다.\ndf.nunique()\n```\n\n\n\n\n    Symbol            7211\n    Market               3\n    Name              7211\n    Sector             158\n    Industry          2264\n    ListingDate       1799\n    SettleMonth          9\n    Representative    2319\n    HomePage          2237\n    Region              22\n    dtype: int64\n\n\n\n\n```python\n# index 값 보기\ndf.index\n```\n\n\n\n\n    RangeIndex(start=0, stop=7211, step=1)\n\n\n\n\n```python\n# 컬럼값 보기\ndf.columns\n```\n\n\n\n\n    Index(['Symbol', 'Market', 'Name', 'Sector', 'Industry', 'ListingDate',\n           'SettleMonth', 'Representative', 'HomePage', 'Region'],\n          dtype='object')\n\n\n\n\n```python\n# 값만 보기\ndf.values\n```\n\n\n\n\n    array([['060310', 'KOSDAQ', '3S', ..., '박종익, 김세완 (각자 대표이사)',\n            'http://www.3sref.com', '서울특별시'],\n           ['095570', 'KOSPI', 'AJ네트웍스', ..., '이현우, 박대현',\n            'http://www.ajnet.co.kr', '서울특별시'],\n           ['006840', 'KOSPI', 'AK홀딩스', ..., '채형석, 이석주(각자 대표이사)',\n            'http://www.aekyunggroup.co.kr', '서울특별시'],\n           ...,\n           ['003280', 'KOSPI', '흥아해운', ..., '이환구', 'http://www.heung-a.com',\n            '서울특별시'],\n           ['037440', 'KOSDAQ', '희림', ..., '정영균, 이목운, 허철호 (각자대표)',\n            'http://www.heerim.com', '서울특별시'],\n           ['238490', 'KOSDAQ', '힘스', ..., '김주환', 'http://www.hims.co.kr',\n            '인천광역시']], dtype=object)\n\n\n\n## 1개의 컬럼 변수로 데이터 탐색\n\n\n```python\n# 카카오를 찾습니다.\ndf[\"Name\"] == \"카카오\" #어딘가에 카카오가 숨어있다.\n```\n\n\n\n\n    0       False\n    1       False\n    2       False\n    3       False\n    4       False\n            ...  \n    7206    False\n    7207    False\n    7208    False\n    7209    False\n    7210    False\n    Name: Name, Length: 7211, dtype: bool\n\n\n\n\n```python\ndf[df[\"Name\"] == \"카카오\"] #True인 index값을 indexing해서 가져온다.\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Symbol</th>\n      <th>Market</th>\n      <th>Name</th>\n      <th>Sector</th>\n      <th>Industry</th>\n      <th>ListingDate</th>\n      <th>SettleMonth</th>\n      <th>Representative</th>\n      <th>HomePage</th>\n      <th>Region</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4716</th>\n      <td>035720</td>\n      <td>KOSPI</td>\n      <td>카카오</td>\n      <td>자료처리, 호스팅, 포털 및 기타 인터넷 정보매개 서비스업</td>\n      <td>인터넷 서비스(인터넷 광고)</td>\n      <td>2017-07-10</td>\n      <td>12월</td>\n      <td>여민수, 조수용</td>\n      <td>http://www.kakaocorp.com</td>\n      <td>제주특별자치도</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n# 서울특별시에 소재지를 두고 있는 KOSPI 종목의 종목명과 심볼을 가져옵니다.\ndf.loc[(df[\"Region\"] == \"서울특별시\") & (df[\"Market\"] == \"KOSPI\"), [\"Symbol\", \"Name\"]]\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Symbol</th>\n      <th>Name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>095570</td>\n      <td>AJ네트웍스</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>006840</td>\n      <td>AK홀딩스</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>027410</td>\n      <td>BGF</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>282330</td>\n      <td>BGF리테일</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>001460</td>\n      <td>BYC</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>7194</th>\n      <td>079980</td>\n      <td>휴비스</td>\n    </tr>\n    <tr>\n      <th>7196</th>\n      <td>005010</td>\n      <td>휴스틸</td>\n    </tr>\n    <tr>\n      <th>7200</th>\n      <td>069260</td>\n      <td>휴켐스</td>\n    </tr>\n    <tr>\n      <th>7205</th>\n      <td>000540</td>\n      <td>흥국화재</td>\n    </tr>\n    <tr>\n      <th>7208</th>\n      <td>003280</td>\n      <td>흥아해운</td>\n    </tr>\n  </tbody>\n</table>\n<p>407 rows × 2 columns</p>\n</div>\n\n\n\n## 파생변수 만들기\n\n\n```python\ndf.columns\n```\n\n\n\n\n    Index(['Symbol', 'Market', 'Name', 'Sector', 'Industry', 'ListingDate',\n           'SettleMonth', 'Representative', 'HomePage', 'Region', 'ListingYear'],\n          dtype='object')\n\n\n\n\n```python\n# ListingYear 파생변수 만들기\ndf[\"ListingDate\"] = pd.to_datetime(df[\"ListingDate\"])\ndf[\"ListingYear\"] = df[\"ListingDate\"].dt.year\ndf[\"ListingYear\"]\n```\n\n\n\n\n    0       2002.0\n    1       2015.0\n    2       1999.0\n    3       2001.0\n    4       2017.0\n             ...  \n    7206       NaN\n    7207       NaN\n    7208    1976.0\n    7209    2000.0\n    7210    2017.0\n    Name: ListingYear, Length: 7211, dtype: float64\n\n\n\n\n```python\ndf.info()\n```\n\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 7211 entries, 0 to 7210\n    Data columns (total 11 columns):\n     #   Column          Non-Null Count  Dtype         \n    ---  ------          --------------  -----         \n     0   Symbol          7211 non-null   object        \n     1   Market          7211 non-null   object        \n     2   Name            7211 non-null   object        \n     3   Sector          2438 non-null   object        \n     4   Industry        2419 non-null   object        \n     5   ListingDate     2438 non-null   datetime64[ns]\n     6   SettleMonth     2438 non-null   object        \n     7   Representative  2438 non-null   object        \n     8   HomePage        2258 non-null   object        \n     9   Region          2438 non-null   object        \n     10  ListingYear     2438 non-null   float64       \n    dtypes: datetime64[ns](1), float64(1), object(9)\n    memory usage: 619.8+ KB\n\n\n\n```python\ndf[[\"ListingYear\", \"ListingDate\"]].dtypes\n```\n\n\n\n\n    ListingYear           float64\n    ListingDate    datetime64[ns]\n    dtype: object\n\n\n\n## 데이터 시각화를 위한 폰트설정\n\n1. 플랫폼 모듈 임포트\n2. 모듈 임포트안에있는 함수 system()으로 통해 각 CPU에 맞는 시스템 이름 호출\n3. 시스템 이름에 맞는 폰트 이름 변수에 입력. \n4. 그 폰트 이름을 plt안에 있는 rc()함수 attribute \"family\"에 입력\n\n\n```python\ndef get_font_family():\n    \"\"\"\n    시스템 환경에 따른 기본 폰트명을 반환하는 함수\n    \"\"\"\n    import platform\n    system_name = platform.system()\n    # colab 사용자는 system_name이 'Linux'로 확인\n\n    if system_name == \"Darwin\" :\n        font_family = \"AppleGothic\"\n    elif system_name == \"Windows\":\n        font_family = \"Malgun Gothic\"\n    else:\n        # Linux\n        # colab에서는 runtime을 <꼭> 재시작 해야함.\n        # 런타임을 재시작 하지 않고 폰트 설치를 하면 기본 설정 폰트가 로드되어 한글이 깨짐.\n        !apt-get update -qq\n        !apt-get install fonts-nanum -qq  > /dev/null\n\n        import matplotlib.font_manager as fm\n\n        fontpath = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf'\n        font = fm.FontProperties(fname=fontpath, size=9)\n        fm._rebuild()\n        font_family = \"NanumBarunGothic\"\n    return font_family\n```\n\n\n```python\nget_font_family()\n```\n\n\n\n\n    'AppleGothic'\n\n\n\n\n```python\n# 시각화를 위한 폰트설정\n# 위에서 만든 함수를 통해 시스템 폰트를 불러와서 font_family 라는 변수에 할당.\na = get_font_family()\n# 폰트설정\nimport matplotlib.pyplot as plt \nplt.rc(\"font\", family = a)\n# 마이너스폰트 설정\nplt.rc(\"axes\", unicode_minus=False)\n# ggplot으로 그래프 스타일 설정\nplt.style.use(\"ggplot\")\n```\n\n### 폰트 설정 확인하기\n\n\n```python\n# 한글폰트 확인하기\npd.Series([1,3,5,7,9]).plot(title=\"한글폰트\")\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x1a2488cc10>\n\n\n\n\n![png](./KRX_EDA_30_1.png)\n\n\n## 한 개의 변수 빈도수 구하고 시각화 하기\n* Keyword\n\n    * Series.value_counts()\n    * Series.value_counts().plot()\n    * Series.value_counts().plot.bar()\n    * Series.value_counts().plot.barh()\n    * sns.countplot()\n\n\n```python\n# Market column에 어떤 데이터들이 있는지 unique로 확인하기.\ndf[\"Market\"].unique()\n```\n\n\n\n\n    array(['KOSDAQ', 'KOSPI', 'KONEX'], dtype=object)\n\n\n\n\n```python\n# value_counts()로 빈도수를 구함.\ndf[\"Market\"].value_counts()\n```\n\n\n\n\n    KOSPI     5555\n    KOSDAQ    1518\n    KONEX      138\n    Name: Market, dtype: int64\n\n\n\n\n```python\n# 빈도수를 시각화 함.\ndf[\"Market\"].sort_values().value_counts().plot.barh(rot=30)\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x1a247a3850>\n\n\n\n\n![png](./KRX_EDA_34_1.png)\n\n\n\n```python\n# Seaborn countplot 활용하여 빈도수를 표현합니다.\nsns.countplot(data = df, y = \"Market\")\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x1a24602950>\n\n\n\n\n![png](./KRX_EDA_35_1.png)\n\n\n### Sector (종류가 많을 시 상위 30개만 추려 시각화)\n\n\n```python\n# 섹터의 빈도수를 구하고\n# 상위 30개 섹터의 빈도수를 sector_count_top 변수에 할당.\nsector_count_top = df[\"Sector\"].value_counts().head(30)\nsector_count_top.index\n```\n\n\n\n\n    Index(['특수 목적용 기계 제조업', '소프트웨어 개발 및 공급업', '전자부품 제조업', '자동차 신품 부품 제조업',\n           '의약품 제조업', '기타 금융업', '기타 화학제품 제조업', '금융 지원 서비스업', '통신 및 방송 장비 제조업',\n           '반도체 제조업', '1차 철강 제조업', '자연과학 및 공학 연구개발업', '의료용 기기 제조업',\n           '일반 목적용 기계 제조업', '플라스틱제품 제조업', '기타 전문 도매업', '기초 화학물질 제조업',\n           '기초 의약물질 및 생물학적 제제 제조업', '컴퓨터 프로그래밍, 시스템 통합 및 관리업',\n           '전동기, 발전기 및 전기 변환 · 공급 · 제어 장치 제조업', '영화, 비디오물, 방송프로그램 제작 및 배급업',\n           '기타 식품 제조업', '의료용품 및 기타 의약 관련제품 제조업', '봉제의복 제조업', '기타 금속 가공제품 제조업',\n           '기계장비 및 관련 물품 도매업', '측정, 시험, 항해, 제어 및 기타 정밀기기 제조업; 광학기기 제외', '건물 건설업',\n           '구조용 금속제품, 탱크 및 증기발생기 제조업', '자료처리, 호스팅, 포털 및 기타 인터넷 정보매개 서비스업'],\n          dtype='object')\n\n\n\n\n```python\ndf_sector_30 = df[df[\"Sector\"].isin(sector_count_top.index)]\n```\n\n\n```python\n# Seaborn countplot 활용하여 빈도수를 표현합니다.\nplt.figure(figsize = (10,8))\nsns.countplot(data = df_sector_30, y=\"Sector\", palette = \"Blues_r\",\n              order=sector_count_top.index).set_title(\"섹터별 빈도수\")\n```\n\n\n\n\n    Text(0.5, 1.0, '섹터별 빈도수')\n\n\n\n\n![png](./KRX_EDA_39_1.png)\n\n\n\n```python\n#색깔바꾸기 옵션.\nprint(plt.colormaps())\n```\n\n    ['Accent', 'Accent_r', 'Blues', 'Blues_r', 'BrBG', 'BrBG_r', 'BuGn', 'BuGn_r', 'BuPu', 'BuPu_r', 'CMRmap', 'CMRmap_r', 'Dark2', 'Dark2_r', 'GnBu', 'GnBu_r', 'Greens', 'Greens_r', 'Greys', 'Greys_r', 'OrRd', 'OrRd_r', 'Oranges', 'Oranges_r', 'PRGn', 'PRGn_r', 'Paired', 'Paired_r', 'Pastel1', 'Pastel1_r', 'Pastel2', 'Pastel2_r', 'PiYG', 'PiYG_r', 'PuBu', 'PuBuGn', 'PuBuGn_r', 'PuBu_r', 'PuOr', 'PuOr_r', 'PuRd', 'PuRd_r', 'Purples', 'Purples_r', 'RdBu', 'RdBu_r', 'RdGy', 'RdGy_r', 'RdPu', 'RdPu_r', 'RdYlBu', 'RdYlBu_r', 'RdYlGn', 'RdYlGn_r', 'Reds', 'Reds_r', 'Set1', 'Set1_r', 'Set2', 'Set2_r', 'Set3', 'Set3_r', 'Spectral', 'Spectral_r', 'Wistia', 'Wistia_r', 'YlGn', 'YlGnBu', 'YlGnBu_r', 'YlGn_r', 'YlOrBr', 'YlOrBr_r', 'YlOrRd', 'YlOrRd_r', 'afmhot', 'afmhot_r', 'autumn', 'autumn_r', 'binary', 'binary_r', 'bone', 'bone_r', 'brg', 'brg_r', 'bwr', 'bwr_r', 'cividis', 'cividis_r', 'cool', 'cool_r', 'coolwarm', 'coolwarm_r', 'copper', 'copper_r', 'cubehelix', 'cubehelix_r', 'flag', 'flag_r', 'gist_earth', 'gist_earth_r', 'gist_gray', 'gist_gray_r', 'gist_heat', 'gist_heat_r', 'gist_ncar', 'gist_ncar_r', 'gist_rainbow', 'gist_rainbow_r', 'gist_stern', 'gist_stern_r', 'gist_yarg', 'gist_yarg_r', 'gnuplot', 'gnuplot2', 'gnuplot2_r', 'gnuplot_r', 'gray', 'gray_r', 'hot', 'hot_r', 'hsv', 'hsv_r', 'icefire', 'icefire_r', 'inferno', 'inferno_r', 'jet', 'jet_r', 'magma', 'magma_r', 'mako', 'mako_r', 'nipy_spectral', 'nipy_spectral_r', 'ocean', 'ocean_r', 'pink', 'pink_r', 'plasma', 'plasma_r', 'prism', 'prism_r', 'rainbow', 'rainbow_r', 'rocket', 'rocket_r', 'seismic', 'seismic_r', 'spring', 'spring_r', 'summer', 'summer_r', 'tab10', 'tab10_r', 'tab20', 'tab20_r', 'tab20b', 'tab20b_r', 'tab20c', 'tab20c_r', 'terrain', 'terrain_r', 'twilight', 'twilight_r', 'twilight_shifted', 'twilight_shifted_r', 'viridis', 'viridis_r', 'vlag', 'vlag_r', 'winter', 'winter_r']\n\n\n\n```python\nsector_value_counts = df[\"Sector\"].value_counts()\n```\n\n\n```python\nsector_value_counts.to_frame().plot.kde()\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x1a2e2cb350>\n\n\n\n\n![png](./KRX_EDA_42_1.png)\n\n\n### Industry\n\n\n```python\n# Industry 의 빈도수를 구합니다.\nindustry_top_30 = df[\"Industry\"].value_counts().head(30)\nindustry_top_30.index\n```\n\n\n\n\n    Index(['기업인수합병', '지주회사', '지주사업', '기업 인수 및 합병', '기업인수 및 합병', '화장품', '모바일게임',\n           '벤처캐피탈', '금융지원 서비스', '자동차부품', '금융지원서비스', '의약품', '도급공사', '합병', '건강기능식품',\n           '-', '셋톱박스', '증권업', '금융지주회사', '의료정보시스템', '배합사료', '사료',\n           '부동산투자, 취득, 매매, 임대', '이미지센서 패키징', '항체치료제', '플라스틱 필름', '소주', '비금융지주회사',\n           '도시가스', '금융 지원 서비스'],\n          dtype='object')\n\n\n\n\n```python\nindustry_top_30\n```\n\n\n\n\n    기업인수합병               37\n    지주회사                 19\n    지주사업                  9\n    기업 인수 및 합병            7\n    기업인수 및 합병             7\n    화장품                   7\n    모바일게임                 7\n    벤처캐피탈                 4\n    금융지원 서비스              4\n    자동차부품                 3\n    금융지원서비스               3\n    의약품                   3\n    도급공사                  3\n    합병                    3\n    건강기능식품                3\n    -                     3\n    셋톱박스                  3\n    증권업                   3\n    금융지주회사                3\n    의료정보시스템               2\n    배합사료                  2\n    사료                    2\n    부동산투자, 취득, 매매, 임대     2\n    이미지센서 패키징             2\n    항체치료제                 2\n    플라스틱 필름               2\n    소주                    2\n    비금융지주회사               2\n    도시가스                  2\n    금융 지원 서비스             2\n    Name: Industry, dtype: int64\n\n\n\n\n```python\n# Industry 빈도수를 pandas 의 plot 기능을 사용해 시각화 합니다.\nindustry_top_30.sort_values().plot.barh(figsize=(10,8), title = \"Industry Count\")\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x1a245101d0>\n\n\n\n\n![png](./KRX_EDA_46_1.png)\n\n\n\n```python\ndf_industry_top_30 = df[df[\"Industry\"].isin(industry_top_30.index)]\n```\n\n\n```python\n# seaborn\nplt.figure(figsize = (10,8))\nsns.countplot(data = df_industry_top_30, y = \"Industry\", order =industry_top_30.index)\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x1a2cd4d710>\n\n\n\n\n![png](./KRX_EDA_48_1.png)\n\n\n### Region \n\n\n```python\ndf[\"Region\"].value_counts().index\n```\n\n\n\n\n    Index(['서울특별시', '경기도', '충청남도', '경상남도', '인천광역시', '충청북도', '부산광역시', '경상북도',\n           '대구광역시', '대전광역시', '전라북도', '강원도', '울산광역시', '광주광역시', '전라남도', '제주특별자치도',\n           '세종특별자치시', '홍콩', '미국', '케이맨 제도', '일본', '싱가포르'],\n          dtype='object')\n\n\n\n\n```python\n# Region 의 빈도수를 구합니다.\n# value_counts()통해 지역별 상장회사의 빈도수를 봅니다.\ndf[\"Region\"].value_counts().sort_values().plot.barh(figsize=(10,8), title = \"Region\")\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x1a25f917d0>\n\n\n\n\n![png](./KRX_EDA_51_1.png)\n\n\n\n```python\nRegion_index = df[\"Region\"].value_counts().index\n```\n\n\n```python\nRegion_region = df[df[\"Region\"].isin(Region_index)]\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Symbol</th>\n      <th>Market</th>\n      <th>Name</th>\n      <th>Sector</th>\n      <th>Industry</th>\n      <th>ListingDate</th>\n      <th>SettleMonth</th>\n      <th>Representative</th>\n      <th>HomePage</th>\n      <th>Region</th>\n      <th>ListingYear</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>060310</td>\n      <td>KOSDAQ</td>\n      <td>3S</td>\n      <td>특수 목적용 기계 제조업</td>\n      <td>반도체 웨이퍼 캐리어</td>\n      <td>2002-04-23</td>\n      <td>03월</td>\n      <td>박종익, 김세완 (각자 대표이사)</td>\n      <td>http://www.3sref.com</td>\n      <td>서울특별시</td>\n      <td>2002.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>095570</td>\n      <td>KOSPI</td>\n      <td>AJ네트웍스</td>\n      <td>산업용 기계 및 장비 임대업</td>\n      <td>렌탈(파렛트, OA장비, 건설장비)</td>\n      <td>2015-08-21</td>\n      <td>12월</td>\n      <td>이현우, 박대현</td>\n      <td>http://www.ajnet.co.kr</td>\n      <td>서울특별시</td>\n      <td>2015.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>006840</td>\n      <td>KOSPI</td>\n      <td>AK홀딩스</td>\n      <td>기타 금융업</td>\n      <td>지주사업</td>\n      <td>1999-08-11</td>\n      <td>12월</td>\n      <td>채형석, 이석주(각자 대표이사)</td>\n      <td>http://www.aekyunggroup.co.kr</td>\n      <td>서울특별시</td>\n      <td>1999.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>054620</td>\n      <td>KOSDAQ</td>\n      <td>APS홀딩스</td>\n      <td>기타 금융업</td>\n      <td>인터넷 트래픽 솔루션</td>\n      <td>2001-12-04</td>\n      <td>12월</td>\n      <td>정기로</td>\n      <td>http://www.apsholdings.co.kr</td>\n      <td>경기도</td>\n      <td>2001.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>265520</td>\n      <td>KOSDAQ</td>\n      <td>AP시스템</td>\n      <td>특수 목적용 기계 제조업</td>\n      <td>디스플레이 제조 장비</td>\n      <td>2017-04-07</td>\n      <td>12월</td>\n      <td>김영주</td>\n      <td>http://www.apsystems.co.kr</td>\n      <td>경기도</td>\n      <td>2017.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>7204</th>\n      <td>189980</td>\n      <td>KOSDAQ</td>\n      <td>흥국에프엔비</td>\n      <td>비알코올음료 및 얼음 제조업</td>\n      <td>과일음료(에이드베이스, 스무디, 착즙쥬스 등)</td>\n      <td>2015-08-07</td>\n      <td>12월</td>\n      <td>박철범, 오길영</td>\n      <td>http://www.hyungkuk.com</td>\n      <td>서울특별시</td>\n      <td>2015.0</td>\n    </tr>\n    <tr>\n      <th>7205</th>\n      <td>000540</td>\n      <td>KOSPI</td>\n      <td>흥국화재</td>\n      <td>보험업</td>\n      <td>손해보험</td>\n      <td>1974-12-05</td>\n      <td>12월</td>\n      <td>권중원</td>\n      <td>http://www.insurance.co.kr</td>\n      <td>서울특별시</td>\n      <td>1974.0</td>\n    </tr>\n    <tr>\n      <th>7208</th>\n      <td>003280</td>\n      <td>KOSPI</td>\n      <td>흥아해운</td>\n      <td>해상 운송업</td>\n      <td>외항화물운송업(케미컬탱커)</td>\n      <td>1976-06-29</td>\n      <td>12월</td>\n      <td>이환구</td>\n      <td>http://www.heung-a.com</td>\n      <td>서울특별시</td>\n      <td>1976.0</td>\n    </tr>\n    <tr>\n      <th>7209</th>\n      <td>037440</td>\n      <td>KOSDAQ</td>\n      <td>희림</td>\n      <td>건축기술, 엔지니어링 및 관련 기술 서비스업</td>\n      <td>설계 및 감리용역</td>\n      <td>2000-02-03</td>\n      <td>12월</td>\n      <td>정영균, 이목운, 허철호 (각자대표)</td>\n      <td>http://www.heerim.com</td>\n      <td>서울특별시</td>\n      <td>2000.0</td>\n    </tr>\n    <tr>\n      <th>7210</th>\n      <td>238490</td>\n      <td>KOSDAQ</td>\n      <td>힘스</td>\n      <td>특수 목적용 기계 제조업</td>\n      <td>OLED Mask 인장기, OLED Mask 검사기 등</td>\n      <td>2017-07-20</td>\n      <td>12월</td>\n      <td>김주환</td>\n      <td>http://www.hims.co.kr</td>\n      <td>인천광역시</td>\n      <td>2017.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>2438 rows × 11 columns</p>\n</div>\n\n\n\n\n```python\n# Region 의 빈도수를 seaborn 의 countplot 으로 그립니다.\nplt.figure(figsize=(10,8))\nsns.countplot(data = df, y = \"Region\", palette=\"Greens_r\")\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x1a263faa90>\n\n\n\n\n![png](./KRX_EDA_54_1.png)\n\n\n## 두 개의 변수 빈도수 구하고 시각화 하기\n* crosstab 으로 빈도수 구하기\n* seaborn의 countplot 으로 빈도수 시각화\n* pandas의 plot 기능으로 시각화\n    * lineplot : 연속된 데이터(숫자, 기간)\n    * barplot : 비연속 데이터(범주형)\n    * hist : 연속된 수치 데이터의 범주화\n\n### pd.crosstab이용하여 지역별 상장 시장 종목 빈도수 구하기\n* pd.crosstab 을 통한 2개의 변수에 대한 빈도수 구하기\n\n\n```python\n# pd.crosstab 을 통한 2개의 변수에 대한 빈도수 구하기\n# Market 과 Region 으로 빈도수 구하기\npd.crosstab(df[\"Market\"],df[\"Region\"])\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Region</th>\n      <th>강원도</th>\n      <th>경기도</th>\n      <th>경상남도</th>\n      <th>경상북도</th>\n      <th>광주광역시</th>\n      <th>대구광역시</th>\n      <th>대전광역시</th>\n      <th>미국</th>\n      <th>부산광역시</th>\n      <th>서울특별시</th>\n      <th>...</th>\n      <th>울산광역시</th>\n      <th>인천광역시</th>\n      <th>일본</th>\n      <th>전라남도</th>\n      <th>전라북도</th>\n      <th>제주특별자치도</th>\n      <th>충청남도</th>\n      <th>충청북도</th>\n      <th>케이맨 제도</th>\n      <th>홍콩</th>\n    </tr>\n    <tr>\n      <th>Market</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>KONEX</th>\n      <td>7</td>\n      <td>36</td>\n      <td>0</td>\n      <td>6</td>\n      <td>5</td>\n      <td>1</td>\n      <td>7</td>\n      <td>0</td>\n      <td>1</td>\n      <td>53</td>\n      <td>...</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>9</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>KOSDAQ</th>\n      <td>16</td>\n      <td>499</td>\n      <td>49</td>\n      <td>39</td>\n      <td>9</td>\n      <td>33</td>\n      <td>38</td>\n      <td>6</td>\n      <td>38</td>\n      <td>527</td>\n      <td>...</td>\n      <td>10</td>\n      <td>57</td>\n      <td>3</td>\n      <td>13</td>\n      <td>15</td>\n      <td>2</td>\n      <td>66</td>\n      <td>58</td>\n      <td>4</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>KOSPI</th>\n      <td>4</td>\n      <td>147</td>\n      <td>42</td>\n      <td>19</td>\n      <td>9</td>\n      <td>21</td>\n      <td>8</td>\n      <td>0</td>\n      <td>36</td>\n      <td>407</td>\n      <td>...</td>\n      <td>16</td>\n      <td>25</td>\n      <td>0</td>\n      <td>7</td>\n      <td>11</td>\n      <td>7</td>\n      <td>26</td>\n      <td>14</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 22 columns</p>\n</div>\n\n\n\n\n```python\n# countplot : Market 과 Region 으로 빈도수 시각화 하기\nplt.figure(figsize=(14,10))\nsns.countplot(data = df, y = \"Region\", hue = \"Market\").set_title(\"지역별, 마켓별 빈도수\")\n```\n\n\n\n\n    Text(0.5, 1.0, '지역별, 마켓별 빈도수')\n\n\n\n\n![png](./KRX_EDA_58_1.png)\n\n\n### 연도별 상장 종목 빈도수 분석\n\n\n```python\n# Market, ListingYear 빈도수 구하기\n# market_year\nMarket_Year = pd.crosstab(df[\"Market\"],df[\"ListingYear\"])\nMarket_Year\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>ListingYear</th>\n      <th>1956.0</th>\n      <th>1962.0</th>\n      <th>1964.0</th>\n      <th>1966.0</th>\n      <th>1968.0</th>\n      <th>1969.0</th>\n      <th>1970.0</th>\n      <th>1971.0</th>\n      <th>1972.0</th>\n      <th>1973.0</th>\n      <th>...</th>\n      <th>2012.0</th>\n      <th>2013.0</th>\n      <th>2014.0</th>\n      <th>2015.0</th>\n      <th>2016.0</th>\n      <th>2017.0</th>\n      <th>2018.0</th>\n      <th>2019.0</th>\n      <th>2020.0</th>\n      <th>2021.0</th>\n    </tr>\n    <tr>\n      <th>Market</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>KONEX</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>12</td>\n      <td>13</td>\n      <td>27</td>\n      <td>26</td>\n      <td>19</td>\n      <td>14</td>\n      <td>15</td>\n      <td>12</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>KOSDAQ</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>20</td>\n      <td>35</td>\n      <td>59</td>\n      <td>90</td>\n      <td>65</td>\n      <td>68</td>\n      <td>89</td>\n      <td>97</td>\n      <td>86</td>\n      <td>33</td>\n    </tr>\n    <tr>\n      <th>KOSPI</th>\n      <td>5</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>6</td>\n      <td>5</td>\n      <td>4</td>\n      <td>1</td>\n      <td>3</td>\n      <td>22</td>\n      <td>...</td>\n      <td>14</td>\n      <td>11</td>\n      <td>9</td>\n      <td>18</td>\n      <td>18</td>\n      <td>20</td>\n      <td>19</td>\n      <td>15</td>\n      <td>14</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 57 columns</p>\n</div>\n\n\n\n### Pandas를 통한 시각화 6.2 연속\n\n\n```python\n# Pandas plot 기능 활용하여 기본 그래프(line)를 그림\n# Pandas plot으로 그릴 때 x축에 인덱스 값이 y축에는 컬럼에 있는 값이 들어감.\n# 컬럼이 여러개라면 다른 색상으로 그려짐.\ng = Market_Year.T.plot(figsize = (10,4), title = \"연도별 시장별 빈도수\")\n```\n\n\n![png](./KRX_EDA_62_0.png)\n\n\n\n```python\n# 컬럼값을 subplots 으로 그립니다.\ng = Market_Year.T.plot(figsize = (10,4), title = \"연도별 시장별 빈도수\", subplots = True)\n```\n\n\n![png](./KRX_EDA_63_0.png)\n\n\n\n```python\n# Pandas plot 기능 활용하여 막대 그래프(bar, barh)를 그립니다.\nMarket_Year.T.plot.bar(figsize = (10,8), title = \"연도별 시장별 빈도수\")\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x1a2de802d0>\n\n\n\n\n![png](./KRX_EDA_64_1.png)\n\n\n### seaborn을 통한 빈도수 시각화\n\n\n```python\n# Seaborn countplot 활용하여 빈도수를 표현합니다.\n# hue 를 사용해 다른 변수를 함께 표현합니다. hue는 색상을 의미합니다.\nplt.figure(figsize = (10,14))\nsns.countplot(data = df, y = \"ListingYear\", hue = \"Market\").set_title(\"연도별 시장별 빈도수\")\n```\n\n\n\n\n    Text(0.5, 1.0, '연도별 시장별 빈도수')\n\n\n\n\n![png](./KRX_EDA_66_1.png)\n\n\n### groupby 와 pivot_table로 빈도수 구하기\n\n\n```python\n# groupby([인덱스 컬럼 리스트])[연산에 사용할 컬럼].연산()\n# market_year\n#groupby([\"Market\",\"ListingYear\"])\nmarket_year_groupby = df.groupby([\"Market\",\"ListingYear\"])[\"Symbol\"].count().unstack().fillna(0).astype(int)\nmarket_year_groupby.columns = market_year_groupby.columns.astype(int)\nmarket_year_groupby\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>1956</th>\n      <th>1962</th>\n      <th>1964</th>\n      <th>1966</th>\n      <th>1968</th>\n      <th>1969</th>\n      <th>1970</th>\n      <th>1971</th>\n      <th>1972</th>\n      <th>1973</th>\n      <th>...</th>\n      <th>2012</th>\n      <th>2013</th>\n      <th>2014</th>\n      <th>2015</th>\n      <th>2016</th>\n      <th>2017</th>\n      <th>2018</th>\n      <th>2019</th>\n      <th>2020</th>\n      <th>2021</th>\n    </tr>\n    <tr>\n      <th>Market</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>KONEX</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>12</td>\n      <td>13</td>\n      <td>27</td>\n      <td>26</td>\n      <td>19</td>\n      <td>14</td>\n      <td>15</td>\n      <td>12</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>KOSDAQ</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>20</td>\n      <td>35</td>\n      <td>59</td>\n      <td>90</td>\n      <td>65</td>\n      <td>68</td>\n      <td>89</td>\n      <td>97</td>\n      <td>86</td>\n      <td>33</td>\n    </tr>\n    <tr>\n      <th>KOSPI</th>\n      <td>5</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>6</td>\n      <td>5</td>\n      <td>4</td>\n      <td>1</td>\n      <td>3</td>\n      <td>22</td>\n      <td>...</td>\n      <td>14</td>\n      <td>11</td>\n      <td>9</td>\n      <td>18</td>\n      <td>18</td>\n      <td>20</td>\n      <td>19</td>\n      <td>15</td>\n      <td>14</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 57 columns</p>\n</div>\n\n\n\n\n```python\n# pivot_table로 같은 결과가 나오게 연산하기\nmarket_year_pivot = pd.pivot_table(data = df, index = [\"Market\"], \n               columns = \"ListingYear\", values = \"Symbol\", \n               aggfunc = \"count\", fill_value = 0).astype(int)\nmarket_year_pivot.columns = market_year_pivot.columns.astype(int)\nmarket_year_pivot\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>1956</th>\n      <th>1962</th>\n      <th>1964</th>\n      <th>1966</th>\n      <th>1968</th>\n      <th>1969</th>\n      <th>1970</th>\n      <th>1971</th>\n      <th>1972</th>\n      <th>1973</th>\n      <th>...</th>\n      <th>2012</th>\n      <th>2013</th>\n      <th>2014</th>\n      <th>2015</th>\n      <th>2016</th>\n      <th>2017</th>\n      <th>2018</th>\n      <th>2019</th>\n      <th>2020</th>\n      <th>2021</th>\n    </tr>\n    <tr>\n      <th>Market</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>KONEX</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>12</td>\n      <td>13</td>\n      <td>27</td>\n      <td>26</td>\n      <td>19</td>\n      <td>14</td>\n      <td>15</td>\n      <td>12</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>KOSDAQ</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>20</td>\n      <td>35</td>\n      <td>59</td>\n      <td>90</td>\n      <td>65</td>\n      <td>68</td>\n      <td>89</td>\n      <td>97</td>\n      <td>86</td>\n      <td>33</td>\n    </tr>\n    <tr>\n      <th>KOSPI</th>\n      <td>5</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>6</td>\n      <td>5</td>\n      <td>4</td>\n      <td>1</td>\n      <td>3</td>\n      <td>22</td>\n      <td>...</td>\n      <td>14</td>\n      <td>11</td>\n      <td>9</td>\n      <td>18</td>\n      <td>18</td>\n      <td>20</td>\n      <td>19</td>\n      <td>15</td>\n      <td>14</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 57 columns</p>\n</div>\n\n\n\n\n```python\n# 위의 groupby 결과를 scatterplot으로 시각화하자.\n# df_market_year\ndf_market_year_sns = df.groupby([\"Market\",\"ListingYear\"])[\"Symbol\"].count()\ndf_market_year_sns = df_market_year_sns.reset_index()\ndf_market_year_sns = df_market_year_sns.rename(columns = {\"Symbol\":\"Count\"})\ndf_market_year_sns.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Market</th>\n      <th>ListingYear</th>\n      <th>Count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>KONEX</td>\n      <td>2013.0</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>KONEX</td>\n      <td>2014.0</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>KONEX</td>\n      <td>2015.0</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>KONEX</td>\n      <td>2016.0</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>KONEX</td>\n      <td>2017.0</td>\n      <td>19</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\nplt.figure(figsize = (10,4))\nsns.scatterplot(data = df_market_year_sns, x = \"ListingYear\", y = \"Count\", hue = \"Market\" )\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x1a29300d90>\n\n\n\n\n![png](./KRX_EDA_71_1.png)\n\n\n\n```python\n# lineplot 그리기\nplt.figure(figsize = (10,4))\nsns.lineplot(data = df_market_year_sns, x = \"ListingYear\", y = \"Count\", hue = \"Market\", ci = None  )\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x1a29ca6bd0>\n\n\n\n\n![png](./KRX_EDA_72_1.png)\n\n\n\n```python\n# relplot으로 subplot 그리기 - scatter\nsns.relplot(data = df_market_year_sns, x = \"ListingYear\", y = \"Count\", hue = \"Market\", col = \"Market\")\n```\n\n\n\n\n    <seaborn.axisgrid.FacetGrid at 0x1a29a824d0>\n\n\n\n\n![png](./KRX_EDA_73_1.png)\n\n\n\n```python\n# relplot으로 subplot 그리기 - line\nsns.relplot(data = df_market_year_sns, x = \"ListingYear\", \n            y = \"Count\", hue = \"Market\", row = \"Market\", kind = \"line\",\n            height=2, aspect=3)\n```\n\n\n\n\n    <seaborn.axisgrid.FacetGrid at 0x1a2b069ed0>\n\n\n\n\n![png](./KRX_EDA_74_1.png)\n\n\n## 데이터 색인후 시각화\n\n\n```python\n# 케이맨 제도에 있는 회사 찾기\ndf[df[\"Region\"] == \"서울특별시\"]\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Symbol</th>\n      <th>Market</th>\n      <th>Name</th>\n      <th>Sector</th>\n      <th>Industry</th>\n      <th>ListingDate</th>\n      <th>SettleMonth</th>\n      <th>Representative</th>\n      <th>HomePage</th>\n      <th>Region</th>\n      <th>ListingYear</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>060310</td>\n      <td>KOSDAQ</td>\n      <td>3S</td>\n      <td>특수 목적용 기계 제조업</td>\n      <td>반도체 웨이퍼 캐리어</td>\n      <td>2002-04-23</td>\n      <td>03월</td>\n      <td>박종익, 김세완 (각자 대표이사)</td>\n      <td>http://www.3sref.com</td>\n      <td>서울특별시</td>\n      <td>2002.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>095570</td>\n      <td>KOSPI</td>\n      <td>AJ네트웍스</td>\n      <td>산업용 기계 및 장비 임대업</td>\n      <td>렌탈(파렛트, OA장비, 건설장비)</td>\n      <td>2015-08-21</td>\n      <td>12월</td>\n      <td>이현우, 박대현</td>\n      <td>http://www.ajnet.co.kr</td>\n      <td>서울특별시</td>\n      <td>2015.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>006840</td>\n      <td>KOSPI</td>\n      <td>AK홀딩스</td>\n      <td>기타 금융업</td>\n      <td>지주사업</td>\n      <td>1999-08-11</td>\n      <td>12월</td>\n      <td>채형석, 이석주(각자 대표이사)</td>\n      <td>http://www.aekyunggroup.co.kr</td>\n      <td>서울특별시</td>\n      <td>1999.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>211270</td>\n      <td>KOSDAQ</td>\n      <td>AP위성</td>\n      <td>통신 및 방송 장비 제조업</td>\n      <td>위성통신 단말기</td>\n      <td>2016-03-04</td>\n      <td>12월</td>\n      <td>류장수</td>\n      <td>http://www.apsi.co.kr</td>\n      <td>서울특별시</td>\n      <td>2016.0</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>027410</td>\n      <td>KOSPI</td>\n      <td>BGF</td>\n      <td>기타 금융업</td>\n      <td>지주회사</td>\n      <td>2014-05-19</td>\n      <td>12월</td>\n      <td>홍정국</td>\n      <td>http://www.bgf.co.kr</td>\n      <td>서울특별시</td>\n      <td>2014.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>7200</th>\n      <td>069260</td>\n      <td>KOSPI</td>\n      <td>휴켐스</td>\n      <td>기타 화학제품 제조업</td>\n      <td>화합물,화학제품 제조</td>\n      <td>2002-10-07</td>\n      <td>12월</td>\n      <td>신진용</td>\n      <td>http://www.huchems.com</td>\n      <td>서울특별시</td>\n      <td>2002.0</td>\n    </tr>\n    <tr>\n      <th>7204</th>\n      <td>189980</td>\n      <td>KOSDAQ</td>\n      <td>흥국에프엔비</td>\n      <td>비알코올음료 및 얼음 제조업</td>\n      <td>과일음료(에이드베이스, 스무디, 착즙쥬스 등)</td>\n      <td>2015-08-07</td>\n      <td>12월</td>\n      <td>박철범, 오길영</td>\n      <td>http://www.hyungkuk.com</td>\n      <td>서울특별시</td>\n      <td>2015.0</td>\n    </tr>\n    <tr>\n      <th>7205</th>\n      <td>000540</td>\n      <td>KOSPI</td>\n      <td>흥국화재</td>\n      <td>보험업</td>\n      <td>손해보험</td>\n      <td>1974-12-05</td>\n      <td>12월</td>\n      <td>권중원</td>\n      <td>http://www.insurance.co.kr</td>\n      <td>서울특별시</td>\n      <td>1974.0</td>\n    </tr>\n    <tr>\n      <th>7208</th>\n      <td>003280</td>\n      <td>KOSPI</td>\n      <td>흥아해운</td>\n      <td>해상 운송업</td>\n      <td>외항화물운송업(케미컬탱커)</td>\n      <td>1976-06-29</td>\n      <td>12월</td>\n      <td>이환구</td>\n      <td>http://www.heung-a.com</td>\n      <td>서울특별시</td>\n      <td>1976.0</td>\n    </tr>\n    <tr>\n      <th>7209</th>\n      <td>037440</td>\n      <td>KOSDAQ</td>\n      <td>희림</td>\n      <td>건축기술, 엔지니어링 및 관련 기술 서비스업</td>\n      <td>설계 및 감리용역</td>\n      <td>2000-02-03</td>\n      <td>12월</td>\n      <td>정영균, 이목운, 허철호 (각자대표)</td>\n      <td>http://www.heerim.com</td>\n      <td>서울특별시</td>\n      <td>2000.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>987 rows × 11 columns</p>\n</div>\n\n\n\n\n```python\n# 1970년 이전에 상장한 기업을 찾습니다.\ndf.loc[df[\"ListingYear\"] < 1970, :].head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Symbol</th>\n      <th>Market</th>\n      <th>Name</th>\n      <th>Sector</th>\n      <th>Industry</th>\n      <th>ListingDate</th>\n      <th>SettleMonth</th>\n      <th>Representative</th>\n      <th>HomePage</th>\n      <th>Region</th>\n      <th>ListingYear</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>56</th>\n      <td>000120</td>\n      <td>KOSPI</td>\n      <td>CJ대한통운</td>\n      <td>도로 화물 운송업</td>\n      <td>Contract Logistics, 포워딩, 항만하역, 해운, 택배국제특송, SCM...</td>\n      <td>1956-07-02</td>\n      <td>12월</td>\n      <td>강신호</td>\n      <td>http://www.cjlogistics.com</td>\n      <td>서울특별시</td>\n      <td>1956.0</td>\n    </tr>\n    <tr>\n      <th>77</th>\n      <td>001530</td>\n      <td>KOSPI</td>\n      <td>DI동일</td>\n      <td>상품 중개업</td>\n      <td>면사,화섬사,면포,혼방포,스포츠웨어용 신합섬 제조,도매,수출</td>\n      <td>1964-01-04</td>\n      <td>12월</td>\n      <td>서태원, 손재선</td>\n      <td>http://www.dong-il.com</td>\n      <td>서울특별시</td>\n      <td>1964.0</td>\n    </tr>\n    <tr>\n      <th>1909</th>\n      <td>004250</td>\n      <td>KOSPI</td>\n      <td>NPC</td>\n      <td>플라스틱제품 제조업</td>\n      <td>산업용기프라스틱제품(플라스틱 파렛트,시트 파렛트) 제조,판매</td>\n      <td>1969-09-08</td>\n      <td>12월</td>\n      <td>최병민</td>\n      <td>http://www.npc.co.kr</td>\n      <td>경기도</td>\n      <td>1969.0</td>\n    </tr>\n    <tr>\n      <th>2202</th>\n      <td>000050</td>\n      <td>KOSPI</td>\n      <td>경방</td>\n      <td>종합 소매업</td>\n      <td>섬유류(면사,면혼방사,면직물,면혼방직물,화섬사,화섬직물) 제조,도매,수출입</td>\n      <td>1956-03-03</td>\n      <td>12월</td>\n      <td>김준, 김담</td>\n      <td>http://www.kyungbang.co.kr</td>\n      <td>서울특별시</td>\n      <td>1956.0</td>\n    </tr>\n    <tr>\n      <th>2476</th>\n      <td>001440</td>\n      <td>KOSPI</td>\n      <td>대한전선</td>\n      <td>절연선 및 케이블 제조업</td>\n      <td>전력선,통신케이블,적산계기,스텐레스압연제품,광케이블,초고압선,알루미늄 제조,도매/전기공사</td>\n      <td>1968-12-27</td>\n      <td>12월</td>\n      <td>나형균</td>\n      <td>http://www.taihan.com</td>\n      <td>경기도</td>\n      <td>1968.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n# 2020년 상장한 서울특별시에 소재한 코스피 종목을 찾습니다.\nseoul = df[\"Region\"] == \"서울특별시\"\nkospi = df[\"Market\"] == \"KOSPI\"\nyear = df[\"ListingYear\"] == 2020\ndf.loc[seoul&kospi&year,:]\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Symbol</th>\n      <th>Market</th>\n      <th>Name</th>\n      <th>Sector</th>\n      <th>Industry</th>\n      <th>ListingDate</th>\n      <th>SettleMonth</th>\n      <th>Representative</th>\n      <th>HomePage</th>\n      <th>Region</th>\n      <th>ListingYear</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>93</th>\n      <td>365550</td>\n      <td>KOSPI</td>\n      <td>ESR켄달스퀘어리츠</td>\n      <td>부동산 임대 및 공급업</td>\n      <td>부동산투자</td>\n      <td>2020-12-23</td>\n      <td>05월</td>\n      <td>박래익</td>\n      <td>http://www.esrks-reit.com</td>\n      <td>서울특별시</td>\n      <td>2020.0</td>\n    </tr>\n    <tr>\n      <th>3410</th>\n      <td>357250</td>\n      <td>KOSPI</td>\n      <td>미래에셋맵스리츠</td>\n      <td>부동산 임대 및 공급업</td>\n      <td>부동산 임대업</td>\n      <td>2020-08-05</td>\n      <td>11월</td>\n      <td>김호식</td>\n      <td>http://www.maps1reit.miraeasset.com</td>\n      <td>서울특별시</td>\n      <td>2020.0</td>\n    </tr>\n    <tr>\n      <th>4146</th>\n      <td>244920</td>\n      <td>KOSPI</td>\n      <td>에이플러스에셋</td>\n      <td>보험 및 연금관련 서비스업</td>\n      <td>보험대리 및 중개업</td>\n      <td>2020-11-20</td>\n      <td>12월</td>\n      <td>곽근호, 서성식, 조규남</td>\n      <td>NaN</td>\n      <td>서울특별시</td>\n      <td>2020.0</td>\n    </tr>\n    <tr>\n      <th>4496</th>\n      <td>350520</td>\n      <td>KOSPI</td>\n      <td>이지스레지던스리츠</td>\n      <td>부동산 임대 및 공급업</td>\n      <td>부동산투자, 취득, 매매, 임대</td>\n      <td>2020-08-05</td>\n      <td>06월</td>\n      <td>박영희</td>\n      <td>http://igisresidencereit.com/</td>\n      <td>서울특별시</td>\n      <td>2020.0</td>\n    </tr>\n    <tr>\n      <th>4501</th>\n      <td>334890</td>\n      <td>KOSPI</td>\n      <td>이지스밸류리츠</td>\n      <td>부동산 임대 및 공급업</td>\n      <td>부동산투자, 취득, 매매, 임대</td>\n      <td>2020-07-16</td>\n      <td>08월</td>\n      <td>도병운</td>\n      <td>http://www.igisvaluereit.com</td>\n      <td>서울특별시</td>\n      <td>2020.0</td>\n    </tr>\n    <tr>\n      <th>4609</th>\n      <td>348950</td>\n      <td>KOSPI</td>\n      <td>제이알글로벌리츠</td>\n      <td>부동산 임대 및 공급업</td>\n      <td>벨기에 파이낸스 타워</td>\n      <td>2020-08-07</td>\n      <td>06월</td>\n      <td>오남수</td>\n      <td>http://jrglobalreit.com</td>\n      <td>서울특별시</td>\n      <td>2020.0</td>\n    </tr>\n    <tr>\n      <th>4741</th>\n      <td>344820</td>\n      <td>KOSPI</td>\n      <td>케이씨씨글라스</td>\n      <td>유리 및 유리제품 제조업</td>\n      <td>판유리 등</td>\n      <td>2020-01-21</td>\n      <td>12월</td>\n      <td>김내환</td>\n      <td>http://www.kccglass.co.kr</td>\n      <td>서울특별시</td>\n      <td>2020.0</td>\n    </tr>\n    <tr>\n      <th>4773</th>\n      <td>357120</td>\n      <td>KOSPI</td>\n      <td>코람코에너지리츠</td>\n      <td>부동산 임대 및 공급업</td>\n      <td>부동산 투자 및 관리</td>\n      <td>2020-08-31</td>\n      <td>11월</td>\n      <td>이성균</td>\n      <td>http://www.koramcoenergyplus.co.kr</td>\n      <td>서울특별시</td>\n      <td>2020.0</td>\n    </tr>\n    <tr>\n      <th>4924</th>\n      <td>363280</td>\n      <td>KOSPI</td>\n      <td>티와이홀딩스</td>\n      <td>기타 금융업</td>\n      <td>지주사업</td>\n      <td>2020-09-22</td>\n      <td>12월</td>\n      <td>유종연</td>\n      <td>http://www.ty-holdings.co.kr</td>\n      <td>서울특별시</td>\n      <td>2020.0</td>\n    </tr>\n    <tr>\n      <th>5079</th>\n      <td>352820</td>\n      <td>KOSPI</td>\n      <td>하이브</td>\n      <td>오디오물 출판 및 원판 녹음업</td>\n      <td>음악 기획/제작, 퍼블리싱, 아티스트 매니지먼트</td>\n      <td>2020-10-15</td>\n      <td>12월</td>\n      <td>방시혁</td>\n      <td>http://www.bighitcorp.com</td>\n      <td>서울특별시</td>\n      <td>2020.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### 지역별 섹터\n\n\n```python\ndf_sr = pd.crosstab(df[\"Sector\"],df[\"Region\"]) #index가 Sector, Region이 컬럼\ndf_sr\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Region</th>\n      <th>강원도</th>\n      <th>경기도</th>\n      <th>경상남도</th>\n      <th>경상북도</th>\n      <th>광주광역시</th>\n      <th>대구광역시</th>\n      <th>대전광역시</th>\n      <th>미국</th>\n      <th>부산광역시</th>\n      <th>서울특별시</th>\n      <th>...</th>\n      <th>울산광역시</th>\n      <th>인천광역시</th>\n      <th>일본</th>\n      <th>전라남도</th>\n      <th>전라북도</th>\n      <th>제주특별자치도</th>\n      <th>충청남도</th>\n      <th>충청북도</th>\n      <th>케이맨 제도</th>\n      <th>홍콩</th>\n    </tr>\n    <tr>\n      <th>Sector</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1차 비철금속 제조업</th>\n      <td>0</td>\n      <td>7</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>3</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1차 철강 제조업</th>\n      <td>0</td>\n      <td>4</td>\n      <td>12</td>\n      <td>7</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>11</td>\n      <td>11</td>\n      <td>...</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>가구 제조업</th>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>가전제품 및 정보통신장비 소매업</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>가정용 기기 제조업</th>\n      <td>0</td>\n      <td>6</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>해상 운송업</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>해체, 선별 및 원료 재생업</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>화학섬유 제조업</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>환경 정화 및 복원업</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>회사 본부 및 경영 컨설팅 서비스업</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>7</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>158 rows × 22 columns</p>\n</div>\n\n\n\n### 컬럼과 인덱스 값으로 색인하기\n\n\n```python\n# 특정 컬럼만 가져오기\n#df_sr[[\"강원도\",\"대구광역시\"]] 아래 코드와 같음. \ndf_sr.loc[:,[\"강원도\",\"대구광역시\"]]\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Region</th>\n      <th>강원도</th>\n      <th>대구광역시</th>\n    </tr>\n    <tr>\n      <th>Sector</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1차 비철금속 제조업</th>\n      <td>0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>1차 철강 제조업</th>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>가구 제조업</th>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>가전제품 및 정보통신장비 소매업</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>가정용 기기 제조업</th>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>해상 운송업</th>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>해체, 선별 및 원료 재생업</th>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>화학섬유 제조업</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>환경 정화 및 복원업</th>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>회사 본부 및 경영 컨설팅 서비스업</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>158 rows × 2 columns</p>\n</div>\n\n\n\n### 특정 행만 가져오기\n\n\n```python\ndf_sr.loc[\"소프트웨어 개발 및 공급업\", :]\n```\n\n\n\n\n    Region\n    강원도         0\n    경기도        37\n    경상남도        0\n    경상북도        0\n    광주광역시       0\n    대구광역시       0\n    대전광역시       1\n    미국          0\n    부산광역시       1\n    서울특별시      97\n    세종특별자치시     0\n    싱가포르        0\n    울산광역시       0\n    인천광역시       0\n    일본          2\n    전라남도        0\n    전라북도        0\n    제주특별자치도     0\n    충청남도        0\n    충청북도        2\n    케이맨 제도      0\n    홍콩          1\n    Name: 소프트웨어 개발 및 공급업, dtype: int64\n\n\n\n\n```python\ndf_sr.loc[[\"소프트웨어 개발 및 공급업\",\"금융 지원 서비스업\",\"의약품 제조업\"], :]\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Region</th>\n      <th>강원도</th>\n      <th>경기도</th>\n      <th>경상남도</th>\n      <th>경상북도</th>\n      <th>광주광역시</th>\n      <th>대구광역시</th>\n      <th>대전광역시</th>\n      <th>미국</th>\n      <th>부산광역시</th>\n      <th>서울특별시</th>\n      <th>...</th>\n      <th>울산광역시</th>\n      <th>인천광역시</th>\n      <th>일본</th>\n      <th>전라남도</th>\n      <th>전라북도</th>\n      <th>제주특별자치도</th>\n      <th>충청남도</th>\n      <th>충청북도</th>\n      <th>케이맨 제도</th>\n      <th>홍콩</th>\n    </tr>\n    <tr>\n      <th>Sector</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>소프트웨어 개발 및 공급업</th>\n      <td>0</td>\n      <td>37</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>97</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>금융 지원 서비스업</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>75</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>의약품 제조업</th>\n      <td>5</td>\n      <td>34</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>39</td>\n      <td>...</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>6</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 22 columns</p>\n</div>\n\n\n\n\n```python\ndf_sr.loc[[\"소프트웨어 개발 및 공급업\",\"금융 지원 서비스업\",\"의약품 제조업\"], [\"서울특별시\"]]\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Region</th>\n      <th>서울특별시</th>\n    </tr>\n    <tr>\n      <th>Sector</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>소프트웨어 개발 및 공급업</th>\n      <td>97</td>\n    </tr>\n    <tr>\n      <th>금융 지원 서비스업</th>\n      <td>75</td>\n    </tr>\n    <tr>\n      <th>의약품 제조업</th>\n      <td>39</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n# \"소프트웨어 개발 및 공급업\" 만 가져와서 막대그래프를 그립니다.\ng = df_sr.loc[\"소프트웨어 개발 및 공급업\",:].sort_values().plot.barh(figsize=(10,5), title = \"지역별 소프트웨어 개발 공급업체 갯수\")\n```\n\n\n![png](./KRX_EDA_87_0.png)\n\n\n\n```python\n# \"의약품 제조업\" 만 가져와서 막대그래프를 그립니다.\ng = df_sr.loc[\"의약품 제조업\", :].sort_values().plot.barh(figsize=(10,5), title = \"지역별 의약품 제조업체 갯수\")\n```\n\n\n![png](./KRX_EDA_88_0.png)\n\n","excerpt":"\"원티드 에듀\" 서류 지원했을 때 주어진 과제가 주가 데이터 분석이었다. \n오늘 서류 면접 결과를 기다리면서 과제 프로젝트를 했을 때 혹시 데이터 탐색시 발견하지 못한 점이 있지 않은지 확인차 시각화하며 데이터를 음미(?)했다.\n데이터를 보며 인사이…","fields":{"slug":"/krx_eda_review_wanted_project/"},"frontmatter":{"date":"Apr 29, 2021","title":"KRX_EDA 원티드 에듀 입사 지원 과제 복습","tags":["KRX_데이터분석","주식데이터분석","원티드_에듀_과제","한글설정","Matplotlib 한글 설정","주피터 한글 설정","Matplotlib 한글 꺠짐"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n\n- 프로젝트: Cohort, Retention, RFM 을 통해 Retail 데이터 분석<br>\n- 분석 목표:퍼널 분석을 통해 유입된 고객이 있다고 가정을 하고,Cohort 분석을 통해 우리가 데려온 고객들을 얼마나 잘 자키고 있는지 retention을 측정을 하고, 고객별로 적절한 마케팅 메세지를 보내주기 위해 RFM을 통해서 고객들을 세그먼트한다.<br>\n- 분석 환경: Google SQL(추출), EXCEL(시각화)<br>\n- 담당 업무: <br>1. EDA 탐색점 데이터 분석<br>2.프로젝트 기획<br>3.퍼널 분석 후 시각화<br>4.Retention 계산<br> 5.RFM 계산 후 시각화<br>\n- 데이터 출처: https://www.kaggle.com/jihyeseo/online-retail-data-set-from-uci-ml-repo\n\n\n<br>\n\n# 코호트 분석 <br>\n### Step 1. 코호트의 기간 기준 정하기  \n\n```sql\nSELECT DISTINCT (DATE(invoice_date) ) AS invoice_date\nFROM `axial-coyote-310511.cohort.cohort_project`\nORDER BY invoice_date\nLIMIT 300\n```\n<p align=\"center\"><img src=\"./2.png\"  height=\"200px\" width=\"100px\"></p> \n우선 코호트 기간을 한 달로 잡았다. 이유는 Retail 산업을 고려하면 코호트 기간을 daily로 잡는 것이 맞겠지만, 데이터를 살펴보니 daily 로그가 많이 빠져있었기 때문이다.\n\n### Step2. 코호트 index 구하기.\n1. 처음 구매한  시점부터 고객들을 월별로 나눠서  트랙킹 하기.\n2. 고객별로 고객이 가장 처음에 구매한 일자 구하기.\n```sql\nSELECT customer_id, DATE(MIN(invoice_date)) AS cohort_day\nFROM cohort.cohort_project\nGROUP BY customer_id\n```\n3. 원본 데이터에 고객별로 처음 구매한 날자 테이블을 JOIN해주기\n4. 우리가 궁극적으로 구해야 하는 것은 코호트 Index. \n코호트 Index란, 고객이 첫 구매하고 재구매가 일어났는지알 알기 위해서 재구매 날과 첫 구매 날의 차를 계산한 결과.\n\n```sql\nWITH first_purchase AS (\nSELECT customer_id, DATE(MIN(invoice_date)) AS cohort_day\nFROM cohort.cohort_project\nGROUP BY customer_id\n)\nSELECT c.*, f.cohort_day, DATE_DIFF(DATE(invoice_date), cohort_day, MONTH) AS cohort_index\nFROM cohort.cohort_project c LEFT JOIN first_purchase f\nON c.customer_id = f.customer_id\n```\n### Step3. 코호트 그룹 만들기. \n같은 달에 첫 구매한 애들끼리 그룹으로 묶어주기.\n1. 코호트 기간을 월로 정했으나 cohort_day를 보면 일까지 나와있다. 코호트로 그룹을 만들기 위해서 월로 바꿔줘야 한다. 함수 DATE_TRUNC()이용.\n\n```sql\nWITH first_purchase AS (\nSELECT customer_id, DATE(MIN(invoice_date)) AS cohort_day\nFROM cohort.cohort_project\nGROUP BY customer_id\n)\nSELECT c.*, f.cohort_day, DATE_DIFF(DATE(invoice_date), cohort_day, MONTH) AS cohort_index, DATE_TRUNC(cohort_day, MONTH) AS cohort_group\nFROM cohort.cohort_project c LEFT JOIN first_purchase f\nON c.customer_id = f.customer_id\n \n```\n<br>\n\n<p align=\"center\"><img src=\"./3.png\"  height=\"130px\" width=\"130px\"></p> \n4월 7일을 4월 1일로 3월 23일은 3월1로 바뀐것을 볼 수 있다. \n\n2. 코호트 그룹별로, 코호트 인덱스별로 해당하는 고객수가 얼마나 되는지 확인하기. \n\n```sql\nWITH first_purchase AS (\nSELECT customer_id, DATE(MIN(invoice_date)) AS cohort_day\nFROM cohort.cohort_project\nGROUP BY customer_id\n)\nSELECT  cohort_group, cohort_index, COUNT(DISTINCT customer_id) AS customer_count\nFROM (\n   SELECT c.*, f.cohort_day, DATE_DIFF(DATE(invoice_date), cohort_day, MONTH) AS cohort_index, DATE_TRUNC(cohort_day, MONTH) AS cohort_group\n   FROM cohort.cohort_project c LEFT JOIN first_purchase f\n   ON c.customer_id = f.customer_id)\nGROUP BY cohort_group, cohort_index\n\n```\n우리가 retention을 볼 때 다음 달에 한번 구매하던 두 번 구매하던 상관없이 이달에 첫 구매한 100명 중에 몇 명이 시간이 지나도 살아있나를 보기 위해서 customer_id를 셀 때 한 사람이 여러분 구매할 수 있으니 DISTINCT을 써줘야 한다.\n\n![png](./4.png)\n\n표를 가로로 보면 유저의 라이프 사이클을 볼 수 있고 세로로 보면 프로덕트의 라이프 사이클을 볼 수 있다.\n가로로 보면 2010년 12월 1일에 가입한 사람들은 885명인데 1달이 지났을 때 재구매 비율이 37%, 그다음 달부터는 안정적으로 유지가 되는 것을 볼 수 있다.\n두 번째 그룹을 보더라도 처음에 22%로 떨어지더라도 그다음부터는 매우 안정적으로 재구매가 일어난다.\n\n값을 세로로 본다면 (가장 최근 데이터는 염두 해주지 말자. 가장 최근 데이터가 2011년 12월 중순이기 때문에 12달 데이터가 완벽히 수집이 안된 상태다.) 데이터가 크게 안 좋아지지는 않는다.\n\n유저의 리텐션은 2달 후부터는 매우 안정적이고, 그리고 프로덕트 라이프 사이클을 봐도 건강한 편이다.\n특이한 점은 2010년 12월에 데려온 고객들이 높은 retention을 보여주는 것. 첫 코호트 고객들에게 회사가 특별한 이벤트를 진행했을 가능성이 있다고 본다. <BR>\n엑셀 파일: <a href=\"./sql_cohort_result.csv\" download>sql_cohort_csv</a>\n\n# 리텐션\n코호트 분석과 클레식 리텐션, 레인지 리텐션을 구하는 방법이 같기 때문에 롤링 리텐션으로 데이터를 분석해보려고 한다. \n\n```sql\nSELECT COUNT(customer_id) as total_customer\n   , COUNT(CASE WHEN  diff_day >=29 THEN 1 END) AS retention_customer\n   , COUNT(CASE WHEN  diff_day >=29 THEN 1 END)/COUNT(customer_id) AS rolling_retention_30\nFROM (\nSELECT customer_id, DATE(MIN(invoice_date)) AS first_purchase,\n   DATE(MAX(invoice_date)) AS recent_purchse,\n   DATE_DIFF(DATE(MAX(invoice_date)),DATE(MIN(invoice_date)),DAY) AS diff_day\nFROM `axial-coyote-310511.cohort.cohort_project`\ngroup by customer_id)\n\n```\n<p align=\"left\"><img src=\"./5.png\"  height=\"200px\" width=\"550px\"></p> \n결과: 데이터상 30일이 지나도 여전히 살아있는 고객은 60%정도이다.\n\n# RFM\n\n```sql\nSELECT customer_id,\nMAX(invoice_date) AS recent_purchase,\nDATE_DIFF(DATE('2011-12-10'),DATE(MAX(invoice_date)), DAY) AS recency,\nCOUNT(invoice_no) AS frequency,\nSUM(quantity * unit_price) AS monetary\n \nFROM `axial-coyote-310511.cohort.cohort_project`\nGROUP BY customer_id\n```\n<a href=\"./RFM.csv\" download>RFM_분석_결과_csv</a>","excerpt":"프로젝트: Cohort, Retention, RFM 을 통해 Retail 데이터 분석 분석 목표:퍼널 분석을 통해 유입된 고객이 있다고 가정을 하고,Cohort 분석을 통해 우리가 데려온 고객들을 얼마나 잘 자키고 있는지 retention을 측정을 …","fields":{"slug":"/Cohort_Project/"},"frontmatter":{"date":"Apr 13, 2021","title":"코호트, 리텐션, RFM을 이용한 데이터 분석 프로젝트","tags":["코호트분석","리텐션분석","RFM분석","데이터분석가","데이터분석프로젝트","SQL","Ggoogle SQL Query"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"# Interviews \n<img src=\"./hacker_rank_interviews.png\">\n\n```sql\nSELECT\ncontest_id, hacker_id, name,\ntotal_submissions,total_accepted_submissions,total_views,total_unique_views\nFROM\n(SELECT \ncontest_id, \nhacker_id, \nname,\nSUM(total_submissions) total_submissions,\nSUM(total_accepted_submissions) total_accepted_submissions\nFROM\nContests\nleft join\nColleges USING(contest_id)\nleft join\nChallenges USING(college_id)\nleft join\nSubmission_Stats USING(challenge_id)\nGROUP BY contest_id, hacker_id, name) A\n\ninner join\n\n(\nSELECT \ncontest_id, hacker_id, name,\nSUM(total_views ) total_views,\nSUM(total_unique_views ) total_unique_views\nFROM\nContests\nleft join\nColleges USING(contest_id)\nleft join\nChallenges USING(college_id)\nleft join\nView_Stats USING(challenge_id)\nGROUP BY contest_id, hacker_id, name) B\n\nUSING(contest_id, hacker_id, name)\n\nWHERE total_submissions IS NOT NULL AND total_accepted_submissions IS NOT NULL AND total_views IS NOT NULL AND total_unique_views IS NOT NULL\n\n```\n\n\n# Contest Leaderboard\n\nYou did such a great job helping Julia with her last coding contest challenge that she wants you to work on this one, too!\n\nThe total score of a hacker is the sum of their maximum scores for all of the challenges. \nWrite a query to print the hacker_id, name, and total score of the hackers ordered by the descending score. \nIf more than one hacker achieved the same total score, then sort the result by ascending hacker_id. Exclude all hackers with 0 a total score of from your result.\n\n번역\n너가 지난번에 줄리아 코딩대회를 잘 도와줘서 줄리아가 이번에도 너의 도움을 원해.\n해커 한명의 총 점수는 그 한명이 도전한 문제의 점수 중 가장 높게 나온 점수들의 합으로 정의한다. \n해커 아이디, 이름, 그리고 해커의 총 점수를 출력해라. \n점수를 내림차순으로 정렬해라.\n만약 한 명이상의 선수가 같은 점수를 받았다면 hacker_id열 기준 오름차순으로 정렬해라.\n총 점수가 0점인 사람은 출력에서 배제하라. \n\n### Input Format\nThe following tables contain contest data: <br>\nHackers: The hacker_id is the id of the hacker, and name is the name of the hacker. <br>\n\n\n|Column|Type|\n|:---:|:---:|\n|hacker_id|Integer|\n|name|String|\n\nSubmissions: The submission_id is the id of the submission, hacker_id is the id of the hacker who made\nthe submission, challenge_id is the id of the challenge for which the submission belongs to, and score is\nthe score of the submission.\n\n|Column|Type|\n|:---:|:---:|\n|submission_id|Integer|\n|hacker_id|Integer|\n|challenge_id|Integer|\n|score|Integer|\n\n### Sample Input\nHackers Table:\n\n|hacker_id|name|\n|:---:|:---:|\n| 4071  | name  |\n| 4806  | Angela  |\n| 26071  | Frank  |\n| 49438  | Patrick  |\n| 74842  | Lisa  |\n| 80305  | Kimberly  |\n| 84072  | Bonnie  |\n| 87868  | Michael  |\n| 92118  | Todd  |\n| 95895  | Joe  |\n\n<br>\n\nSubmissions Table: <br>\n\n|submission_id|hacker_id|challenge_id|score|\n|:---:|:---:|:---:|:---:|\n|67194|<span style=\"color:blue\">74842</span>|<span style=\"color:blue\">63132</span>|<span style=\"color:blue\">76</span>|\n|64479   |<span style=\"color:blue\">74842</span>   |<span style=\"color:blue\">19797</span>   |<span style=\"color:blue\">98</span>   |\n|40742   |26071   |49593   |20   |\n|17513   |4806   |49593   |32   |\n|69846   |80305   |19797   |19   |\n|41002   |26071   |89343   |36   |\n|52826   |49438   |49593   |9   |\n|31093   |26071   |19797   |2   |\n|81614   |84072   |49593   |100   |\n|44829   |26071   |89343   |17   |\n|75147   |80305   |49593   |48   |\n|14115   |4806   |49593   |76   |\n|6943   |<span style=\"color:red\">4071</span>   |<span style=\"color:red\">19797</span>   |<span style=\"color:red\">95</span>   |\n|12855   |4806   |25917   |13   |\n|73343   |80305   |49593   |42   |\n|84264   |84072   |63132   |0   |\n|9951   |<span style=\"color:red\">4071</span>   |<span style=\"color:red\">49593</span>   |<span style=\"color:red\">43</span>   |\n|45104   |49438   |25917   |34   |\n|53795   |<span style=\"color:blue\">74842</span>   |<span style=\"color:blue\">19797</span>   |<span style=\"color:blue\">5</span>   |\n|26363   |26071   |19797   |5   |\n|10063   |<span style=\"color:red\">4071</span>   |<span style=\"color:red\">49593</span>   |<span style=\"color:red\">96</span>   |\n\n<br>\nExplanation <br>\nHacker 4071 submitted solutions for challenges 19797 and 49593, so the total score = 95 + max(43,96) = 101\n<br>\nHacker 74842 submitted solutions for challenges 19797 and 63132, so the total score = max(98,5) + 76 = 174\n<br>\n<br>\n분석\n<br>\n해커랭크 mysql서버는 window function이 안된다. <br>\n처음에는 코드가 잘못된줄 알고 계속 들여다 봤지만 안되서 ms sql server로 바꿔서 진행했다. \n해커랭크 mysql서버가 예전버전이어서 window function이 안되는것같아 방법을 2개로 나눠서 진행했다. 첫 번째 방법은 회사 mysql 서버에서 window function이 돌아갈때를 가정하고 풀었고 두 번째 방법은 회사 mysql 서버가 예전 버전이라고 가정하고 window function 없이 풀었다. <br>\n\n방법 1: \n1. 첫 번째 테이블 만들기\n2. 첫 번째 select 절 만들기\n3. 두 번째 테이블절 지정.\n4. 두 번째 select절 조건 작성\n5. 두 번째 select절 출력\n6. 세 번째 테이블 지정\n7. 세 번째 select절 조건 만들기<br>\n7-1. hacker_id당, name당 score 점수 합산 <br>\n7-2. 점수 합산이 0인것은 제외 <br>\n7-3. 가장 높은 점수 부터 내림차순으로 정렬 출력, 같은 점수가 있다면 hacker_id 올림차순으로 정렬 출력.\n8. 세 번째 select절 출력\n\n```sql\n/*\n8. 세 번째 select절 출력\n*/\nselect hacker_id, name, sum(score) \n/*\n6. 세 번째 테이블 지정\n*/\nfrom\n(\n    /*\n    5. 두 번째 select절 출력\n    */\n    select t.hacker_id, \n           t.name, \n           t.challenge_id, \n           t.score, \n           t.rnk\n    /*\n    3. 두 번째 테이블절 지정. \n    */\n    from (\n        /*\n        2. 첫 번째 select 절 만들기\n        해커 아이디, 해커 이름, 해커가 도전했을 떄 부여받은 아이디, 점수, 그리고 서브미션 해커아이디와 서브미션 도전 아이디 기준으로 파티션을 나누고 서브미션 점수 열 기준으로 내림차순하는 하는 열을 rnk라고 이름을 만들고 출력한다. \n        */\n        select hackers.hacker_id as hacker_id, \n               hackers.name as name , \n               submissions.challenge_id as challenge_id,\n               submissions.score as score,\n               row_number() over (partition by submissions.hacker_id, submissions.challenge_id order by submissions.score desc) as rnk\n         /*\n         1. 첫 번째 테이블 만들기\n         해커 태이블과 서브미션 테이블을 해커테이블의 해커아이디와 서브미션 테이블의 해커아이디 기준으로 inner join을 해준다.\n         */        \n        from hackers inner join submissions on hackers.hacker_id = submissions.hacker_id) t\n    /*\n    4. 두 번째 select절 조건 작성\n    rnk가 1인 행만 출력. rnk가 1이라는 뜻은 같은 문제를 풀었을 때 가장 높은 점수를 받은 값을 의미함.\n    */\n    where rnk = 1\n) t2\n/*7. 세 번째 select절 조건 만들기*/\ngroup by hacker_id, name\nhaving sum(score)  != 0\norder by sum(score)  desc, hacker_id\n```\n방법2\n\n```sql\nselect hackers.hacker_id, hackers.name, sum(max_score) as total_score\n\n    from(\n    select hacker_id, challenge_id, max(score) as max_score\n    from Submissions\n    group by hacker_id, challenge_id\n    ) t inner join hackers on t.hacker_id = hackers.hacker_id \ngroup by hackers.hacker_id, hackers.name\nhaving total_score != 0 \norder by total_score DESC, hacker_id\n```\n\n# New Companies\n목표: print the company_code, founder name, total number of lead managers, total number of senior managers, total number of managers, and total number of employees.\n조건: Order your output by ascending company_code. \n주의사항: \n1. the table may contain duplicate records.\n2. the company_code is string, so the sorting should not be numeric. \n\n방법1: Inner Join 구문 이용하기\n```sql\nselect c.company_code\n, c.founder\n, count(distinct lm.lead_manager_code)\n, count(distinct sm.senior_manager_code)\n, count(distinct m.manager_code)\n, count(distinct e.employee_code)\nfrom company c \ninner join lead_manager lm on c.company_code = lm.company_code\ninner join senior_manager sm on lm.lead_manager_code = sm.lead_manager_code\ninner join manager m on sm.senior_manager_code = m.senior_manager_code\ninner join employee e on m.manager_code = e.manager_code\n\ngroup by c.company_code, c.founder\norder by c.company_code\n```\n\n방법 2: 서브쿼리 이용하기 \n```sql \nselect c.company_code, \nc.founder,\n(select count(distinct lead_manager_code) from lead_manager where c.company_code = company_code),\n(select count(distinct senior_manager_code) from senior_manager where c.company_code = company_code),\n(select count(distinct manager_code) from manager where c.company_code = company_code),\n(select count(distinct employee_code) from employee where c.company_code = company_code)\nfrom company c\norder by c.company_code\n```\n# Occupation\n방법1: \n```sql\nselect min(doctor), min(professor),min(singer), min(actor)\nfrom(select \ncase when occupation = 'doctor' then name else null end Doctor,\ncase when occupation = 'professor' then name else null end Professor,\ncase when occupation = 'singer' then name else null end Singer,\ncase when occupation = 'actor' then name else null end Actor,\nrow_number() over (partition by occupation order by name) rnk\nfrom occupations \n) t\ngroup by t.rnk\norder by t.rnk\n```\n방법2: \n```sql\nselect \nmin(case when occupation = \"doctor\" then name else null end) Doctor,\nmin(case when occupation = \"professor\" then name else null end) Professor,\nmin(case when occupation = \"singer\" then name else null end) Singer,\nmin(case when occupation = \"actor\" then name else null end) Actor\n\nfrom(\nselect name,\noccupation,\nrow_number() over (partition by occupation order by name) rnk\nfrom occupations\n) t\ngroup by t.rnk\norder by t.rnk\n```\n방법3: window function 사용하지 않고 풀기. \n```sql\nSET @r1=0, @r2=0, @r3=0. @r4=0;\nselect min(Doctor), min(Professor), min(Singer), min(Actor)\nfrom(\n    select case occupation when 'Doctor' then @r1:=@r1+1\n                           when 'Professor' then @r2:=@r2+1\n                           when 'Singer' then @r3:=@r3+1\n                           when 'Actor' then @r4:=r4+1 END AS RowLine,\n            case when occupation = 'doctor' then name else null end as Doctor,\n            case when occupation = 'professor' then name else null end as Professor,\n            case when occupation = 'singer' then name else null end as Singer,\n            case when occupation = 'actor' then name else null end as Actor\n            from occupation order by name\n)as t\ngroup by RowLine\n```\n\n# Binary Tree Nodes\n방법 1: \n```sql\n-- write a query to find node type of binary tree\n\n-- order by the value of node --> interpreted as order it by n\n\n-- 1. P에 없는 N은 Leaf\n-- 2. P에 있는 N은 inner \n-- 3. P에 null이 있는 같은 열의 N은 Root\n\nselect N,\ncase \nwhen P IS NULL then 'Root'\nwhen N  IN (select distinct P from BST) then 'Inner'\nelse 'Leaf' END \nfrom BST\norder by N\n```\n\n방법 2: join문 활용하기\n```sql\nselect distinct BST.N,\ncase\nwhen BST.P IS NULL then 'Root'\nwhen BST2.P IS NULL then 'Leaf'\nelse 'Inner'\nend\nfrom BST left join BST BST2 on BST.N = BST2.P\norder by n\n```\n\n# SQL Project Planning\n```sql\n-- 1. the start and end dates of projects listed by the number of days it took to complete the project in ascending order. \n-- 2. if more than one project have the same number of completion days\n-- then order by the start date of the project. \nselect t.Start_Date, t2.End_Date\nfrom\n(select Start_Date\n, row_number() over (order by Start_Date) rnk\nfrom Projects\nwhere Start_Date NOT IN (select distinct End_Date from Projects)) t\ninner join (\nselect End_Date\n, row_number() over (order by End_Date) rnk\nfrom projects\nwhere End_Date NOT IN (select distinct Start_Date from Projects)) t2\non t.rnk = t2.rnk\norder by DATEDIFF(end_date,start_date)\n```\n# Ollivander's Inventory\n```sql\n-- 1. write a query to print the id, age, coins_needed, and power of the wands that Ron's interested in, sorted in order of descending power. \n-- 2. If more than one wand has same power, sort the result in order of descending age. \n-- 3. age하고 power가 같은 것중에 coins_needed가 가장 적은 것을 추출해라. \nselect t.id, t.age, t.coins_needed, t.power\nfrom(\nselect\nwands.id as id, \nwands_property.age as age, \nwands.coins_needed as coins_needed, \nwands.power as power,\nrow_number() over (partition by wands_property.age, wands.power order by wands.coins_needed) as rnk, \nwands_property.is_evil as is_evil\nfrom wands inner join wands_property on wands.code = wands_property.code \n) t\nwhere rnk = 1 and t.is_evil = 0\norder by t.power desc, t.age desc\n```\n# Weather Observation 20\n```sql\n-- median \n-- 홀수 n+1/2 번째 숫자가 \n-- 짝수 AVG(n/2,(n/2)+1) 숫자가 median \n-- n은 총 갯수. \n\nselect ROUND(AVG(LAT_N),4)\nfrom \n(\nselect \n    row_number() over(order by LAT_N) rnk,\n    count(*) over () n,\n    LAT_N\nfrom station \n) t\nwhere case \n        when MOD(n,2) =1 then rnk = (n+1)/2\n        ELSE rnk IN (n/2,(n/2)+1) \n      END\n```\n# LeetCode: 262. Trips and Users\n```sql\n\n# 1.write a SQL query to find the cancellation rate of requests with unbanned users (both client and driver must not be banned)\n# 2. each day between \"2013-10-01\" and \"2013-10-03\"\n# 3. cancellation rate =  dividing the umber of canceled/the total number of requests \n# 4. return the result table in any order \n# 5. cancellation rate to two decimal points \n\n# case when Status != 'completed' then 1 else 0 end as total_number_of_cancel,\n# count(*) over () as total_number_of_status\n\nSELECT \nRequest_at as Day, \nROUND(cancelation_rate/total_status_number,2) as 'Cancellation Rate'\n\nFROM(\nSELECT t.Request_at,\nSUM(case when Status != 'completed' then 1 else 0 end) as cancelation_rate,\ncount(*) as total_status_number\nFROM Trips t \n    INNER JOIN Users uc ON t.Client_Id = uc.Users_Id\n    INNER JOIN Users ud ON t.Driver_Id = ud.Users_Id\nWHERE ud.Banned = 'No' AND uc.Banned = 'No' AND t.Request_at BETWEEN '2013-10-01' AND '2013-10-03'\nGROUP BY t.Request_at\n) t2\n```\n# LeetCode: 626. Exchange Seats\n```sql\nSELECT \n    CASE\n        WHEN MOD(id,2) = 1 AND id != total_number then id + 1\n        WHEN MOD(id,2) = 1 AND id = total_number then id \n        ELSE id -1\n        END as id \n    , student\nFROM(\nSELECT *,\nCOUNT(*) OVER () as total_number \nFROM seat\n) t\norder by id \n```","excerpt":"Interviews Contest Leaderboard You did such a great job helping Julia with her last coding contest challenge that she wants you to work on …","fields":{"slug":"/Hacker_Rank_SQL/"},"frontmatter":{"date":"Apr 07, 2021","title":"난이도 중/상 SQL 해커랭크, 리트코드 문제풀이 (총10문제)","tags":["SQL해커랭크_Contest_Leaderboard","SQL해커랭크_Interviews","SQL해커랭크_New Companies","SQL해커랭크_Occupation","SQL해커랭크_Binary Tree Nodes","SQL해커랭크_SQL Project Planning","SQL해커랭크_Ollivander's Inventory","SQL해커랭크_Weather Observation 20","SQL_LeetCode_262. Trips and Users","SQL_LeetCode_626. Exchange Seats","Window_Function","Subquery","With"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"- 프로젝트: 서울시 생활 인구 변화 분석\n- 분석목표: 서울시 생활 인구 2019년 2020년 데이터 EDA 분석, 시각화 \n- 분석환경:\n1. dplyr ==  1.0.4\n2. ggplot2 == 3.3.3\n3. extrafont ==  0.17\n- 담당업무: EDA, 프로젝트 기획, 시각화\n## 1. 전처리\n```R\nlibrary(dplyr)\nlibrary(ggplot2)\n\ndata_2019 = read.csv('data/SEOUL_PEOPLE_GU_2019.csv', fileEncoding = 'UTF-8', colClasses=c('시간대'='character'))\ndata_2020 = read.csv('data/SEOUL_PEOPLE_GU_2020.csv', fileEncoding = 'UTF-8', colClasses=c('시간대'='character'))\ndata_2019 %>% head()\ndata_2020 %>% head()\n\n#1. 전처리\n## 2개로 나눠진 데이터를 하나의 데이터로 합치자. \nSP_GU = rbind(data_2019, data_2020)\nSP_GU %>% head(10)\nSP_GU %>% tail(10)\n\nSP_GU %>% str() #기준일의 character가 시간으로 되있는것을 알 수 있다. \n\nSP_GU = SP_GU %>% \n  mutate(기준일 = as.Date(기준일))\nSP_GU %>% str()\n\nSP_GU = SP_GU %>% mutate(연도 = format(기준일,'%Y'))\nSP_GU = SP_GU %>% mutate(요일 = format(기준일, '%u_%a'))\nSP_GU %>% head()\n```\n출력 결과\n![png](./year_day_added.png)\n## 2. 요약 및 시각화\n매년 가장 핫한 holiday는 당연 크리스마스다. 당연 2019의 크리스마스 날 서울 인구 활동은 2020의 크리스마스 서울 인구 활동보다 많을 것이라고 예상하고 코드를 짜보자.\n```R\nSP_GU %>% \n  filter(기준일 %in% c(as.Date('2019-12-24'), as.Date('2020-12-24'))) %>% \n  group_by(기준일) %>% \n  summarise(TOTAL = sum(생활인구수))\n```\n![png](./2019_2020_christmas_populate_rate.png)\n예상했던 데로 2019의 서울이 더 활발하게 움직이는 것을 볼 수 있다. 허나 결과가 조금 이상하다... 우리나라가 중국도 아니고 인구가 2억 명이 넘는다.... 곰곰이 생각해 보니 한 사람이 1시에도 2시에도 3시에도 서울에서 생활을 할 수 있으므로, 중복되어 큰 숫자가 나온 것이라 유추할 수 있다. 중요한 건 2019년과 2020년의 서울 생활 양을 비교하는 것이기 때문에 상대적인 비교만 하면 될 뿐 숫자 자체에 의미를 두지 않았다.\n#### 2-1. 저녁시간대의 크리스마스 이동 인구를 상대적으로 계산해 보자. \n```R\nSP_GU %>% \n  filter(기준일 %in% c(as.Date('2019-12-24'), as.Date('2020-12-24'))) %>% \n  filter(시간대 %in% c('18','19','20','21')) %>% \n  group_by(기준일) %>% \n  summarise(TOTAL = sum(생활인구수))\n```\n![png](./2019_2020_christmas_population_night_rate.png)\n드라마틱한 변화를 감지하진 못했다... 저녁시간의 활동 또한 2019년도가 2020에 앞섰다. \n\n## 3. 자치구별 생활인구수 합계 계산 / 막대그래프 시각화 \n분석의 목표는 \"2019년 대비 2020년의 생활인구 변화의 특성 파악\"이지만 번외로 강남이 땅값이 왜 비싼 지가 궁금해졌다. 내가 알기로는 유동인구가 많아야 땅값이 오른다는데 통상적으로 강남이 항상 땅값이 높으니 당연히 강남 유동인구가 가장 많지 않을까 해서 유동인구를 분석해봤다.\n```R\nagg1 = SP_GU %>% \n  group_by(자치구) %>% \n  summarise(TOTAL = sum(생활인구수))\nagg1 %>% \n  arrange(desc(TOTAL))\n```\n![png](./2019_2020_summed_per_region_population.png)\n```R\nagg1 %>% \n  ggplot(aes(자치구, TOTAL))+\n  geom_col()\nagg1 %>% \n  ggplot(aes(reorder(자치구,-TOTAL),TOTAL)) + \n  geom_col() +\n  theme(axis.text.x = element_text(angle=90))\n```\n![png](./2019_2020_summed_per_region_population_graph.png)\n```R\nagg2 = SP_GU %>% \n  group_by(연도, 자치구) %>% \n  summarise(TOTAL = sum(생활인구수))\n\nagg2 %>%  ggplot(aes(reorder(자치구,-TOTAL),TOTAL,fill=연도)) + geom_col(position='dodge') +\n  theme(axis.text.x = element_text(angle=90))\n```\n![png](./2020_2019_bar_comparison.png)\n역시... 예상대로 강남구, 송파구, 서초구가 2019~2020 서울 유동인구 1,2,3등을 차지했다.생활인구 결과값이 비정상적으로 크게 나온건 개인별, 시간별이 중복될 뿐만 아니라 2019,2020년도를 합해서 계산했기 떄문이다. \n\n## 4. 2020년의 각 자치구별 생활인구의 연령대 비중 계산해보자. 나이 구간별로 생활한 장소가 다를 수 있지 않을까? \n```R\nagg3 = SP_GU %>% \n  filter(연도 =='2020') %>% \n  group_by(자치구, 연령대) %>% \n  summarise(TOTAL = sum(생활인구수)) %>% \n  mutate(PROP = TOTAL/sum(TOTAL))\nagg3\n\nagg3 %>% \n  ggplot(aes(연령대, 자치구, fill=PROP))+\n  geom_tile()+ scale_fill_distiller(palette = 'Blues', direction =1)\n  ```\n  ![png](./chapter_4_1.png)\n 비율이기 때문에 행으로 수치값을 모두 더하면 1이 된다. 색이 진하다는 뜻은 그 지역에 해당 나이 때의 행동반경이 활발했다는 뜻이다. 2020년도에는 10대는 양천구에, 20대는 관악구, 30대는 중구, 40대는 중구, 서초구, 강남구 생활 빈도가 높다는 것을 알 수 있다. 중구, 서초구 강남구는 회사가 밀집한 지역이기 때문에 30대와 40대가 당연히 많을 수밖에 없고 50대 이후부터는 색이 희미해지는 걸 보아 점점 활동량이 감소한다는 것을 유추할 수 있다.\n\n ## 5.연도/자치구/요일별 일평균 생활인구수 열지도 시각화\n ```R\n agg4 = SP_GU %>% \n  group_by(연도, 자치구, 요일, 기준일) %>% \n  summarise(TOTAL = sum(생활인구수))\nagg4\n agg5 = agg4 %>% \n  summarise(MEAN = mean(TOTAL))\nagg5\n\nagg5 %>% \n  ggplot(aes(요일, 자치구, fill=MEAN)) +\n  geom_tile()+\n  facet_wrap(vars(연도))+\n  scale_fill_distiller(palette = 'YlGnBu', direction =1)\n ```\n  ![png](./chapter_5_1.png)\n  2019년도와 2020년도 두 해 모두 월요일부터 일요일까지 송파구와 강남구는 북적거린다. 하지만 강남구의 2019년의 색갈이 2020년의 색깔보다 더 진하다. \n\n  ## 6. tidyr의 spread()를 활용한 형태 변환 및 변화율 계산 \n ```R\nlibrary(tidyr)\nagg5\nagg5 %>% \n  spread(연도, MEAN)\n\nagg6 = agg5 %>% \n  spread(연도, MEAN) %>% \n  mutate(RATIO = `2020`/`2019`)\nagg6\n\nagg6 %>% \n  ggplot(aes(요일, 자치구, fill=RATIO)) + \n  geom_tile() + \n  scale_fill_distiller(palette = 'Reds')\n   ```\n  ![png](./chapter_6_1.png)\n\n  ## 7. 연도/ 연령대/ 요일별 일평균 생활인구수를 계산하고 2019년 대비 2020년의 변화율을 열지도로 시각화 \n```R\n  agg7 = SP_GU %>% \n  group_by(연도, 연령대, 요일, 기준일) %>% \n  summarise(TOTAL = sum(생활인구수))\nagg8 = agg7 %>% \n  summarise(MEAN = mean(TOTAL))\nagg8\nagg9 = agg8 %>% \n  spread(연도, MEAN) %>% \n  mutate(RATIO = `2020`/`2019`)\nagg9\nagg9 %>% \n  ggplot(aes(요일, 연령대,fill=RATIO)) + \n  geom_tile()+\n  scale_fill_distiller(palette = \"Reds\")\n```\n![png](./chapter_7_1.png)\n2019년에 비해 2020년에 생활 반경이 줄어든 나이대는 20대, 60대, 70대인걸 볼 수 있다. 코로나가 터져도 30대, 40대, 50대는 직장을 다녀야 하기 때문에 다른 나이때보다 생활 반경에 영향을 덜 받지 않았나 유추해볼 수 있을것같다. \n또한 전반적으로 서울 전 연령대에 붉은색이 띄는 것을 보아 1이상이 넘는 즉 2019년보다 2020년에 서울에서의 인구 활동이 줄어들었다는 것을 볼 수 있고 그 뜻은 경기권이나 타 지역에서 서울로 유입되는 사람들이 줄어들었다라고 해석할 수도 있겠다.\n\n7가지 방법으로 2019년도와 2020년도의 서울시 인구생활량을 분석해봤고 역시 예상했던 데로 2019년이 2020년도보다 활동량이 많았다.\n지역적으로 본다면 강남구, 송파구, 서초구가 가장 활동량이 많았으며 나이대를 본다면 30대~40대의 활동량이 가장 많았다. 즉 종합해 본다면 일을 하기 위한 활동량을 코로나로 많은 영향을 받지 않은 것을 분석을 통해 알 수 있었다.","excerpt":"프로젝트: 서울시 생활 인구 변화 분석 분석목표: 서울시 생활 인구 2019년 2020년 데이터 EDA 분석, 시각화  분석환경: dplyr ==  1.0.4 ggplot2 == 3.3.3 extrafont ==  0.17 담당업무: EDA, 프로젝…","fields":{"slug":"/R_change_of_population/"},"frontmatter":{"date":"Mar 11, 2021","title":"R로 서울시 생활인구 변화 분석 (탐색적 분석)","tags":["데이터 분석 프로젝트","데이터 분석 입사 프로젝트","R studio 탐색적 분석하기","서울생활인구 분석"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nWorkbench, sequel pro를 aws로 연결해서 sql을 연습하다 oracle을 연습해보고 싶어졌다. 허나 oracle에 가보니 오라클 18c Express Edition이 윈도우만 지원하는것 보고 하늘이시여.. 또 몇시간 블로그 보며 파해쳐야 겠구나 했다. \n\n오늘은 Mac_Lover들이 oracle을 docker로 다운로드 하는 방법을 포스팅 해보려고 한다. \n\n우선 크게 보면 \n\n**1. Docker 설치**\n\n**2. Terminal 에서 oracle 11g 설치**\n\n**3. SQL Plus 실행하기**\n\n로 보면 되겠다.\n\n**1. Docker 설치**\n- https://www.docker.com/products/docker-desktop\n1-1. 도커를 다운로드 하면 앱에서 창에 복붙해야하는 명령어가 뜬다. 그 명령어를 터미널 창에 복붙하자.\n![png](./step1.png)\n1-2. 복붙이 끝나고 실행이 되면 우측 상단과 중간 사이에 귀여운 고래 모양이 뜬다. 고래 모양이 뜨면 잘 실행되고 있다는 것.\n![png](./step2.png)\n**2. Terminal 에서 oracle 11g 설치하기.**\n2-1. 터미널에서 **docker search oracle-xe-11g** 명령어를 입력해서 다운로드 할 이미지를 검색한다.검색한 이미지 목록을 밑으로 쭉 내리다 보면 jaspeen/oracle-xe-11g가 보일텐데 이 것을 사용해서 이미지를 다운로드 해보자.\n![png](./step3.png)\n2-2. docker pull jaspeen/oracle-xe-11g 명령어를 입력하면 아래와 같은 화면이 나타난다.\n![png](./step4.png)\n2-3. docker images 명령어를 사용하여 jaspeen/oracle-xe-11g 이미지가 다운로드 되었는지 확인한다.\n![png](./step5.png)\n2-4. 이제 컨테이너 생성을 해 볼 차례이다.\n**docker run --name oracle -d -p 8080:8080 -p 1521:1521 jaspeen/oracle-xe-11g** 명령어를 입력하여 컨테이너의 생성과 실행을 해준다.\n여기서 **oracle 은 임의로 설정한 컨테이너의 이름**으로, 본인이 원하는 이름을 넣어 명령문을 작성하면 된다.내가 입력한 oracle 의 컨테이너가 생성되고\n**docker ps**를 입력해서 컨테이너가 제대로 실행되는지 (NAMES에 지정한 이름이 뜨는지) 확인한다.\n![png](./step6.png)\n2-5. **docker exec -it oracle sqlplus** 명령문으로 sqlplus를 시작할 수 있다.여기서 oracle 은 컨테이너를 생성할때 만든 임의의 컨테이너 이름으로, 각자가 정한 이름을 넣어주면 된다.\n2-6. Enter user-name : 에는 **system** 을 입력하고 Enter password: 에는 본인이 원하는 비번을 입력하면 되는데 비밀번호는 입력해도 화면상으로 보이지 않기 때문에 오타에 유의한다.둘 다 정확히 입력했다면 Connecte to: 와 함께 SQL> 이 뜬다\n![png](./step7.png)\n**3. SQLPlus가 실행된다.**","excerpt":"Workbench, sequel pro를 aws로 연결해서 sql을 연습하다 oracle을 연습해보고 싶어졌다. 허나 oracle에 가보니 오라클 18c Express Edition이 윈도우만 지원하는것 보고 하늘이시여.. 또 몇시간 블로그 보며 파…","fields":{"slug":"/Oracle_Docker_Download/"},"frontmatter":{"date":"Mar 02, 2021","title":"Docker로 Oracle다운받기","tags":["Dockerdownload","mac도커다운로드","mac오라클다운로드하는방법","맥오라클다운로드"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n함수 f(x,y) = $2x^2 + 6xy + 7y^2 -26x -54y + 107$로 표현되는 지형을 그래프로 나타내고, 지형의 (14,4)지점에 공을 두었다면 어떤 경로로 공이 움직일지 경로를 그려라\n\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport sympy\nimport matplotlib as mpl\nimport scipy as sp\nimport pandas as pd\n```\n\n\n```python\nblack = {'facecolor':'black'}\ndef f(x,y):\n    return 2*x**2+6*x*y+7*y**2-26*x-54*y+107\nxx = np.linspace(1,16,100)\nyy = np.linspace(-3,6,90)\nX, Y = np.meshgrid(xx,yy)\nZ=f(X,Y)\n\ndef gx(x,y):\n    return 4*x+6*y-26\ndef gy(x,y):\n    return 6*x+14*y-54\n\nxx2 = np.linspace(1,16,15)\nyy2 = np.linspace(-3,6,9)\nX2,Y2 = np.meshgrid(xx2,yy2)\nGX = gx(X2,Y2)\nGY = gy(X2,Y2)\nplt.figure(figsize=(10,5))\nplt.contour(X,Y,Z, levels=np.logspace(0,3,10))\n\nx0=(14,4)\nplt.plot(x0[0],x0[1],'ko',ms=10)\n\nfor i in range(20):\n    g=np.array((gx(x0[0],x0[1]),gy(x0[0],x0[1])))\n    x_next= x0-0.02*g\n    plt.annotate('',xy=x_next,xytext=x0,arrowprops=black)\n    x0= x_next\n    plt.quiver(X2,Y2,GX,GY,color='blue', scale=400, minshaft=2)\n\nplt.xlabel('x')\nplt.ylabel('y')\n\nplt.show()\n```\n\n\n![png](./chapter4_from_page_317_to_318_2_0.png)\n\n\n\n","excerpt":"함수 f(x,y) = 로 표현되는 지형을 그래프로 나타내고, 지형의 (14,4)지점에 공을 두었다면 어떤 경로로 공이 움직일지 경로를 그려라","fields":{"slug":"/chapter4_from_page_317_to_318_files/"},"frontmatter":{"date":"Jan 22, 2021","title":"기울기 벡터를 이용한 응용 문제 풀이.","tags":["Matplotlib","gredient vector","기울기 벡터","퀴버플로"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"### Steps to get a gradient vector.      \n- given equation: f(x,y) = $2x^2 + 6xy + 7y^2 -26x -54y + 107$\n- first, cal with respect to x and y each. Then you will get a two derivative equations\n\n\\begin{equation}\n    \\nabla (f)= \\begin{bmatrix}\n4x+6y-26\\\\\n6x+14y-54\n\\end{bmatrix}\n\\end{equation}\n\n- second, choose the point where you want to get a slope each. Then apply the point.\n    - x=7,y=1\n        - then you will get an (8,2) which is a slope of each derevative. \n- at last, try to get a gradient vector by calculating the following : $\\sqrt{8^2+2^2}$\n\n\n\n\n```python\nimport numpy as np\nimport matplotlib.pylab as plt\n\nblack = {'facecolor':'black'}\ndef g(x,y):\n    return (4*x+6*y-26, 6*x+14*y-54)\ng1 = g(7,1)\ng2 = g(2,1)\n\nplt.plot(0,0,'kP',ms=10)\nplt.plot(g1[0],g1[1],'ro',ms=10)\nplt.annotate('',xy=g1,xytext=(0,0),arrowprops=black)\nplt.plot(g2[0],g2[1],'ro',ms=10)\nplt.annotate('',xy=g2,xytext=(0,0),arrowprops=black)\n\nplt.axis('equal')\nplt.show()\n```\n\n\n![png](./Cal_Matrix_chapter4_from_page_313_to_316_1_0.png)\n\n\nFollowing graph is to show the function : f(x,y) = $2x^2 + 6xy + 7y^2 -26x -54y + 107$\n\n\n```python\ndef f(x,y):\n    return 2*x**2+6*x*y+7*y**2-26*x-54*y+107\nxx = np.linspace(1,16,100)\nyy = np.linspace(-3,6,90)\nX,Y = np.meshgrid(xx,yy)\nZ=f(X,Y)\n\ndef gx(x,y):\n    return 4*x+6*y-26\ndef gy(x,y):\n    return 6*x+14*y-54\n\nxx2 = np.linspace(1,16,15)\nyy2 = np.linspace(-3,6,9)\n\nX2, Y2 = np.meshgrid(xx2,yy2)\nGX = gx(X2,Y2)\nGY = gy(X2,Y2)\nplt.figure(figsize = (10,5))\nplt.contour(X,Y,Z, levels=np.logspace(0,3,10))\nplt.quiver(X2, Y2, GX, GY, color='blue', scale=400, minshaft=2)\n\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('quiver plot')\nplt.show()\n```\n\n\n![png](./Cal_Matrix_chapter4_from_page_313_to_316_3_0.png)\n\n\n\n```python\n\n```\n","excerpt":"Steps to get a gradient vector. given equation: f(x,y) =  first, cal with respect to x and y each. Then you will get a two derivative equat…","fields":{"slug":"/Cal_Matrix_chapter4_from_page_313_to_316_files/"},"frontmatter":{"date":"Jan 18, 2021","title":"Matplotlib을 이용해 기울기 벡터 퀴버플롯 그래프 표현.","tags":["Matplotlib","gredient vector","기울기 벡터","퀴버플로"],"update":"Jan 01, 0001"}}}]}},"pageContext":{}},"staticQueryHashes":["2027115977","694178885"]}