{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n# Contest Leaderboard\n\nYou did such a great job helping Julia with her last coding contest challenge that she wants you to work on this one, too!\n\nThe total score of a hacker is the sum of their maximum scores for all of the challenges. \nWrite a query to print the hacker_id, name, and total score of the hackers ordered by the descending score. \nIf more than one hacker achieved the same total score, then sort the result by ascending hacker_id. Exclude all hackers with 0 a total score of from your result.\n\n번역\n너가 지난번에 줄리아 코딩대회를 잘 도와줘서 줄리아가 이번에도 너의 도움을 원해.\n해커 한명의 총 점수는 그 한명이 도전한 문제의 점수 중 가장 높게 나온 점수들의 합으로 정의한다. \n해커 아이디, 이름, 그리고 해커의 총 점수를 출력해라. \n점수를 내림차순으로 정렬해라.\n만약 한 명이상의 선수가 같은 점수를 받았다면 hacker_id열 기준 오름차순으로 정렬해라.\n총 점수가 0점인 사람은 출력에서 배제하라. \n\n### Input Format\nThe following tables contain contest data: <br>\nHackers: The hacker_id is the id of the hacker, and name is the name of the hacker. <br>\n\n\n|Column|Type|\n|:---:|:---:|\n|hacker_id|Integer|\n|name|String|\n\nSubmissions: The submission_id is the id of the submission, hacker_id is the id of the hacker who made\nthe submission, challenge_id is the id of the challenge for which the submission belongs to, and score is\nthe score of the submission.\n\n|Column|Type|\n|:---:|:---:|\n|submission_id|Integer|\n|hacker_id|Integer|\n|challenge_id|Integer|\n|score|Integer|\n\n### Sample Input\nHackers Table:\n|hacker_id|name|\n|:---:|:---:|\n| 4071  | name  |\n| 4806  | Angela  |\n| 26071  | Frank  |\n| 49438  | Patrick  |\n| 74842  | Lisa  |\n| 80305  | Kimberly  |\n| 84072  | Bonnie  |\n| 87868  | Michael  |\n| 92118  | Todd  |\n| 95895  | Joe  |\n\n<br>\n\nSubmissions Table:\n|submission_id   |hacker_id   |challenge_id   |score   |\n|:-:|:-:|:-:|:-:|\n|67194   |<span style=\"color:blue\">74842</span>   |<span style=\"color:blue\">63132</span>   |<span style=\"color:blue\">76</span>   |\n|64479   |<span style=\"color:blue\">74842</span>   |<span style=\"color:blue\">19797</span>   |<span style=\"color:blue\">98</span>   |\n|40742   |26071   |49593   |20   |\n|17513   |4806   |49593   |32   |\n|69846   |80305   |19797   |19   |\n|41002   |26071   |89343   |36   |\n|52826   |49438   |49593   |9   |\n|31093   |26071   |19797   |2   |\n|81614   |84072   |49593   |100   |\n|44829   |26071   |89343   |17   |\n|75147   |80305   |49593   |48   |\n|14115   |4806   |49593   |76   |\n|6943   |<span style=\"color:red\">4071</span>   |<span style=\"color:red\">19797</span>   |<span style=\"color:red\">95</span>   |\n|12855   |4806   |25917   |13   |\n|73343   |80305   |49593   |42   |\n|84264   |84072   |63132   |0   |\n|9951   |<span style=\"color:red\">4071</span>   |<span style=\"color:red\">49593</span>   |<span style=\"color:red\">43</span>   |\n|45104   |49438   |25917   |34   |\n|53795   |<span style=\"color:blue\">74842</span>   |<span style=\"color:blue\">19797</span>   |<span style=\"color:blue\">5</span>   |\n|26363   |26071   |19797   |5   |\n|10063   |<span style=\"color:red\">4071</span>   |<span style=\"color:red\">49593</span>   |<span style=\"color:red\">96</span>   |\n\n<br>\nExplanation\nHacker 4071 submitted solutions for challenges 19797 and 49593, so the total score = 95 + max(43,96) = 101\n<br>\nHacker 74842 submitted solutions for challenges 19797 and 63132, so the total score = max(98,5) + 76 = 174\n<br>\n<br>\n분석\n<br>\n해커랭크 mysql서버는 window function이 안된다. <br>\n처음에는 코드가 잘못된줄 알고 계속 들여다 봤지만 안되서 ms sql server로 바꿔서 진행했다. \n해커랭크 mysql서버가 예전버전이어서 window function이 안되는것같아 방법을 2개로 나눠서 진행했다. 첫 번째 방법은 회사 mysql 서버에서 window function이 돌아갈때를 가정하고 풀었고 두 번째 방법은 회사 mysql 서버가 예전 버전이라고 가정하고 window function 없이 풀었다. <br>\n\n방법 1: \n1. 첫 번째 테이블 만들기\n2. 첫 번째 select 절 만들기\n3. 두 번째 테이블절 지정.\n4. 두 번째 select절 조건 작성\n5. 두 번째 select절 출력\n6. 세 번째 테이블 지정\n7. 세 번째 select절 조건 만들기<br>\n7-1. hacker_id당, name당 score 점수 합산 <br>\n7-2. 점수 합산이 0인것은 제외 <br>\n7-3. 가장 높은 점수 부터 내림차순으로 정렬 출력, 같은 점수가 있다면 hacker_id 올림차순으로 정렬 출력.\n8. 세 번째 select절 출력\n\n```sql\n/*\n8. 세 번째 select절 출력\n*/\nselect hacker_id, name, sum(score) \n/*\n6. 세 번째 테이블 지정\n*/\nfrom\n(\n    /*\n    5. 두 번째 select절 출력\n    */\n    select t.hacker_id, \n           t.name, \n           t.challenge_id, \n           t.score, \n           t.rnk\n    /*\n    3. 두 번째 테이블절 지정. \n    */\n    from (\n        /*\n        2. 첫 번째 select 절 만들기\n        해커 아이디, 해커 이름, 해커가 도전했을 떄 부여받은 아이디, 점수, 그리고 서브미션 해커아이디와 서브미션 도전 아이디 기준으로 파티션을 나누고 서브미션 점수 열 기준으로 내림차순하는 하는 열을 rnk라고 이름을 만들고 출력한다. \n        */\n        select hackers.hacker_id as hacker_id, \n               hackers.name as name , \n               submissions.challenge_id as challenge_id,\n               submissions.score as score,\n               row_number() over (partition by submissions.hacker_id, submissions.challenge_id order by submissions.score desc) as rnk\n         /*\n         1. 첫 번째 테이블 만들기\n         해커 태이블과 서브미션 테이블을 해커테이블의 해커아이디와 서브미션 테이블의 해커아이디 기준으로 inner join을 해준다.\n         */        \n        from hackers inner join submissions on hackers.hacker_id = submissions.hacker_id) t\n    /*\n    4. 두 번째 select절 조건 작성\n    rnk가 1인 행만 출력. rnk가 1이라는 뜻은 같은 문제를 풀었을 때 가장 높은 점수를 받은 값을 의미함.\n    */\n    where rnk = 1\n) t2\n/*7. 세 번째 select절 조건 만들기*/\ngroup by hacker_id, name\nhaving sum(score)  != 0\norder by sum(score)  desc, hacker_id\n```","excerpt":"Contest Leaderboard You did such a great job helping Julia with her last coding contest challenge that she wants you to work on this one, t…","fields":{"slug":"/Hacker_Rank_SQL/"},"frontmatter":{"date":"Apr 07, 2021","title":"난이도 중 SQL 해커랭크 문제풀이 (총9문제)","tags":["SQL해커랭크_Contest_Leaderboard",null,null,null],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"서울시 생활인구 변화 분석\n\n데이터 출처 : \"행정동별 서울생활인구(내국인)\" -> 집계 및 변환\n서울열린데이터광장(http://data.seoul.go.kr/dataList/OA-14991/S/1/datasetView.do)\n\n데이터 설명 : 2019, 2020년 12월 한달 간 서울시 25개 자치구, 24개 시간대, 7개 연령대별 생활인구수\n\n분석 목표   : 2019년 대비 2020년의 생활인구 변화의 특성 파악\n## 1. 전처리\n```R\nlibrary(dplyr)\nlibrary(ggplot2)\n\ndata_2019 = read.csv('data/SEOUL_PEOPLE_GU_2019.csv', fileEncoding = 'UTF-8', colClasses=c('시간대'='character'))\ndata_2020 = read.csv('data/SEOUL_PEOPLE_GU_2020.csv', fileEncoding = 'UTF-8', colClasses=c('시간대'='character'))\ndata_2019 %>% head()\ndata_2020 %>% head()\n\n#1. 전처리\n## 2개로 나눠진 데이터를 하나의 데이터로 합치자. \nSP_GU = rbind(data_2019, data_2020)\nSP_GU %>% head(10)\nSP_GU %>% tail(10)\n\nSP_GU %>% str() #기준일의 character가 시간으로 되있는것을 알 수 있다. \n\nSP_GU = SP_GU %>% \n  mutate(기준일 = as.Date(기준일))\nSP_GU %>% str()\n\nSP_GU = SP_GU %>% mutate(연도 = format(기준일,'%Y'))\nSP_GU = SP_GU %>% mutate(요일 = format(기준일, '%u_%a'))\nSP_GU %>% head()\n```\n출력 결과\n![png](./year_day_added.png)\n## 2. 요약 및 시각화\n매년 가장 핫한 holiday는 당연 크리스마스다. 당연 2019의 크리스마스 날 서울 인구 활동은 2020의 크리스마스 서울 인구 활동보다 많을 것이라고 예상하고 코드를 짜보자.\n```R\nSP_GU %>% \n  filter(기준일 %in% c(as.Date('2019-12-24'), as.Date('2020-12-24'))) %>% \n  group_by(기준일) %>% \n  summarise(TOTAL = sum(생활인구수))\n```\n![png](./2019_2020_christmas_populate_rate.png)\n예상했던 데로 2019의 서울이 더 활발하게 움직이는 것을 볼 수 있다. 허나 결과가 조금 이상하다... 우리나라가 중국도 아니고 인구가 2억 명이 넘는다.... 곰곰이 생각해 보니 한 사람이 1시에도 2시에도 3시에도 서울에서 생활을 할 수 있으므로, 중복되어 큰 숫자가 나온 것이라 유추할 수 있다. 중요한 건 2019년과 2020년의 서울 생활 양을 비교하는 것이기 때문에 상대적인 비교만 하면 될 뿐 숫자 자체에 의미를 두지 않았다.\n#### 2-1. 저녁시간대의 크리스마스 이동 인구를 상대적으로 계산해 보자. \n```R\nSP_GU %>% \n  filter(기준일 %in% c(as.Date('2019-12-24'), as.Date('2020-12-24'))) %>% \n  filter(시간대 %in% c('18','19','20','21')) %>% \n  group_by(기준일) %>% \n  summarise(TOTAL = sum(생활인구수))\n```\n![png](./2019_2020_christmas_population_night_rate.png)\n드라마틱한 변화를 감지하진 못했다... 저녁시간의 활동 또한 2019년도가 2020에 앞섰다. \n\n## 3. 자치구별 생활인구수 합계 계산 / 막대그래프 시각화 \n분석의 목표는 \"2019년 대비 2020년의 생활인구 변화의 특성 파악\"이지만 번외로 강남이 땅값이 왜 비싼 지가 궁금해졌다. 내가 알기로는 유동인구가 많아야 땅값이 오른다는데 통상적으로 강남이 항상 땅값이 높으니 당연히 강남 유동인구가 가장 많지 않을까 해서 유동인구를 분석해봤다.\n```R\nagg1 = SP_GU %>% \n  group_by(자치구) %>% \n  summarise(TOTAL = sum(생활인구수))\nagg1 %>% \n  arrange(desc(TOTAL))\n```\n![png](./2019_2020_summed_per_region_population.png)\n```R\nagg1 %>% \n  ggplot(aes(자치구, TOTAL))+\n  geom_col()\nagg1 %>% \n  ggplot(aes(reorder(자치구,-TOTAL),TOTAL)) + \n  geom_col() +\n  theme(axis.text.x = element_text(angle=90))\n```\n![png](./2019_2020_summed_per_region_population_graph.png)\n```R\nagg2 = SP_GU %>% \n  group_by(연도, 자치구) %>% \n  summarise(TOTAL = sum(생활인구수))\n\nagg2 %>%  ggplot(aes(reorder(자치구,-TOTAL),TOTAL,fill=연도)) + geom_col(position='dodge') +\n  theme(axis.text.x = element_text(angle=90))\n```\n![png](./2020_2019_bar_comparison.png)\n역시... 예상대로 강남구, 송파구, 서초구가 2019~2020 서울 유동인구 1,2,3등을 차지했다.생활인구 결과값이 비정상적으로 크게 나온건 개인별, 시간별이 중복될 뿐만 아니라 2019,2020년도를 합해서 계산했기 떄문이다. \n\n## 4. 2020년의 각 자치구별 생활인구의 연령대 비중 계산해보자. 나이 구간별로 생활한 장소가 다를 수 있지 않을까? \n```R\nagg3 = SP_GU %>% \n  filter(연도 =='2020') %>% \n  group_by(자치구, 연령대) %>% \n  summarise(TOTAL = sum(생활인구수)) %>% \n  mutate(PROP = TOTAL/sum(TOTAL))\nagg3\n\nagg3 %>% \n  ggplot(aes(연령대, 자치구, fill=PROP))+\n  geom_tile()+ scale_fill_distiller(palette = 'Blues', direction =1)\n  ```\n  ![png](./chapter_4_1.png)\n 비율이기 때문에 행으로 수치값을 모두 더하면 1이 된다. 색이 진하다는 뜻은 그 지역에 해당 나이 때의 행동반경이 활발했다는 뜻이다. 2020년도에는 10대는 양천구에, 20대는 관악구, 30대는 중구, 40대는 중구, 서초구, 강남구 생활 빈도가 높다는 것을 알 수 있다. 중구, 서초구 강남구는 회사가 밀집한 지역이기 때문에 30대와 40대가 당연히 많을 수밖에 없고 50대 이후부터는 색이 희미해지는 걸 보아 점점 활동량이 감소한다는 것을 유추할 수 있다.\n\n ## 5.연도/자치구/요일별 일평균 생활인구수 열지도 시각화\n ```R\n agg4 = SP_GU %>% \n  group_by(연도, 자치구, 요일, 기준일) %>% \n  summarise(TOTAL = sum(생활인구수))\nagg4\n agg5 = agg4 %>% \n  summarise(MEAN = mean(TOTAL))\nagg5\n\nagg5 %>% \n  ggplot(aes(요일, 자치구, fill=MEAN)) +\n  geom_tile()+\n  facet_wrap(vars(연도))+\n  scale_fill_distiller(palette = 'YlGnBu', direction =1)\n ```\n  ![png](./chapter_5_1.png)\n  2019년도와 2020년도 두 해 모두 월요일부터 일요일까지 송파구와 강남구는 북적거린다. 하지만 강남구의 2019년의 색갈이 2020년의 색깔보다 더 진하다. \n\n  ## 6. tidyr의 spread()를 활용한 형태 변환 및 변화율 계산 \n ```R\nlibrary(tidyr)\nagg5\nagg5 %>% \n  spread(연도, MEAN)\n\nagg6 = agg5 %>% \n  spread(연도, MEAN) %>% \n  mutate(RATIO = `2020`/`2019`)\nagg6\n\nagg6 %>% \n  ggplot(aes(요일, 자치구, fill=RATIO)) + \n  geom_tile() + \n  scale_fill_distiller(palette = 'Reds')\n   ```\n  ![png](./chapter_6_1.png)\n\n  ## 7. 연도/ 연령대/ 요일별 일평균 생활인구수를 계산하고 2019년 대비 2020년의 변화율을 열지도로 시각화 \n```R\n  agg7 = SP_GU %>% \n  group_by(연도, 연령대, 요일, 기준일) %>% \n  summarise(TOTAL = sum(생활인구수))\nagg8 = agg7 %>% \n  summarise(MEAN = mean(TOTAL))\nagg8\nagg9 = agg8 %>% \n  spread(연도, MEAN) %>% \n  mutate(RATIO = `2020`/`2019`)\nagg9\nagg9 %>% \n  ggplot(aes(요일, 연령대,fill=RATIO)) + \n  geom_tile()+\n  scale_fill_distiller(palette = \"Reds\")\n```\n![png](./chapter_7_1.png)\n2019년에 비해 2020년에 생활 반경이 줄어든 나이대는 20대, 60대, 70대인걸 볼 수 있다. 코로나가 터져도 30대, 40대, 50대는 직장을 다녀야 하기 때문에 다른 나이때보다 생활 반경에 영향을 덜 받지 않았나 유추해볼 수 있을것같다. \n또한 전반적으로 서울 전 연령대에 붉은색이 띄는 것을 보아 1이상이 넘는 즉 2019년보다 2020년에 서울에서의 인구 활동이 줄어들었다는 것을 볼 수 있고 그 뜻은 경기권이나 타 지역에서 서울로 유입되는 사람들이 줄어들었다라고 해석할 수도 있겠다.\n\n7가지 방법으로 2019년도와 2020년도의 서울시 인구생활량을 분석해봤고 역시 예상했던 데로 2019년이 2020년도보다 활동량이 많았다.\n지역적으로 본다면 강남구, 송파구, 서초구가 가장 활동량이 많았으며 나이대를 본다면 30대~40대의 활동량이 가장 많았다. 즉 종합해 본다면 일을 하기 위한 활동량을 코로나로 많은 영향을 받지 않은 것을 분석을 통해 알 수 있었다.","excerpt":"서울시 생활인구 변화 분석 데이터 출처 : \"행정동별 서울생활인구(내국인)\" -> 집계 및 변환\n서울열린데이터광장(http://data.seoul.go.kr/dataList/OA-14991/S/1/datasetView.do) 데이터 설명 : 2019…","fields":{"slug":"/R_change_of_population/"},"frontmatter":{"date":"Mar 11, 2021","title":"R로 서울시 생활인구 변화 분석 (탐색적 분석)","tags":["데이터 분석 프로젝트","데이터 분석 입사 프로젝트","R studio 탐색적 분석하기","서울생활인구 분석"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nWorkbench, sequel pro를 aws로 연결해서 sql을 연습하다 oracle을 연습해보고 싶어졌다. 허나 oracle에 가보니 오라클 18c Express Edition이 윈도우만 지원하는것 보고 하늘이시여.. 또 몇시간 블로그 보며 파해쳐야 겠구나 했다. \n\n오늘은 Mac_Lover들이 oracle을 docker로 다운로드 하는 방법을 포스팅 해보려고 한다. \n\n우선 크게 보면 \n\n**1. Docker 설치**\n\n**2. Terminal 에서 oracle 11g 설치**\n\n**3. SQL Plus 실행하기**\n\n로 보면 되겠다.\n\n**1. Docker 설치**\n- https://www.docker.com/products/docker-desktop\n1-1. 도커를 다운로드 하면 앱에서 창에 복붙해야하는 명령어가 뜬다. 그 명령어를 터미널 창에 복붙하자.\n![png](./step1.png)\n1-2. 복붙이 끝나고 실행이 되면 우측 상단과 중간 사이에 귀여운 고래 모양이 뜬다. 고래 모양이 뜨면 잘 실행되고 있다는 것.\n![png](./step2.png)\n**2. Terminal 에서 oracle 11g 설치하기.**\n2-1. 터미널에서 **docker search oracle-xe-11g** 명령어를 입력해서 다운로드 할 이미지를 검색한다.검색한 이미지 목록을 밑으로 쭉 내리다 보면 jaspeen/oracle-xe-11g가 보일텐데 이 것을 사용해서 이미지를 다운로드 해보자.\n![png](./step3.png)\n2-2. docker pull jaspeen/oracle-xe-11g 명령어를 입력하면 아래와 같은 화면이 나타난다.\n![png](./step4.png)\n2-3. docker images 명령어를 사용하여 jaspeen/oracle-xe-11g 이미지가 다운로드 되었는지 확인한다.\n![png](./step5.png)\n2-4. 이제 컨테이너 생성을 해 볼 차례이다.\n**docker run --name oracle -d -p 8080:8080 -p 1521:1521 jaspeen/oracle-xe-11g** 명령어를 입력하여 컨테이너의 생성과 실행을 해준다.\n여기서 **oracle 은 임의로 설정한 컨테이너의 이름**으로, 본인이 원하는 이름을 넣어 명령문을 작성하면 된다.내가 입력한 oracle 의 컨테이너가 생성되고\n**docker ps**를 입력해서 컨테이너가 제대로 실행되는지 (NAMES에 지정한 이름이 뜨는지) 확인한다.\n![png](./step6.png)\n2-5. **docker exec -it oracle sqlplus** 명령문으로 sqlplus를 시작할 수 있다.여기서 oracle 은 컨테이너를 생성할때 만든 임의의 컨테이너 이름으로, 각자가 정한 이름을 넣어주면 된다.\n2-6. Enter user-name : 에는 **system** 을 입력하고 Enter password: 에는 본인이 원하는 비번을 입력하면 되는데 비밀번호는 입력해도 화면상으로 보이지 않기 때문에 오타에 유의한다.둘 다 정확히 입력했다면 Connecte to: 와 함께 SQL> 이 뜬다\n![png](./step7.png)\n**3. SQLPlus가 실행된다.**","excerpt":"Workbench, sequel pro를 aws로 연결해서 sql을 연습하다 oracle을 연습해보고 싶어졌다. 허나 oracle에 가보니 오라클 18c Express Edition이 윈도우만 지원하는것 보고 하늘이시여.. 또 몇시간 블로그 보며 파…","fields":{"slug":"/Oracle_Docker_Download/"},"frontmatter":{"date":"Mar 02, 2021","title":"Docker로 Oracle다운받기","tags":["Dockerdownload","mac도커다운로드","mac오라클다운로드하는방법","맥오라클다운로드"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n함수 f(x,y) = $2x^2 + 6xy + 7y^2 -26x -54y + 107$로 표현되는 지형을 그래프로 나타내고, 지형의 (14,4)지점에 공을 두었다면 어떤 경로로 공이 움직일지 경로를 그려라\n\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport sympy\nimport matplotlib as mpl\nimport scipy as sp\nimport pandas as pd\n```\n\n\n```python\nblack = {'facecolor':'black'}\ndef f(x,y):\n    return 2*x**2+6*x*y+7*y**2-26*x-54*y+107\nxx = np.linspace(1,16,100)\nyy = np.linspace(-3,6,90)\nX, Y = np.meshgrid(xx,yy)\nZ=f(X,Y)\n\ndef gx(x,y):\n    return 4*x+6*y-26\ndef gy(x,y):\n    return 6*x+14*y-54\n\nxx2 = np.linspace(1,16,15)\nyy2 = np.linspace(-3,6,9)\nX2,Y2 = np.meshgrid(xx2,yy2)\nGX = gx(X2,Y2)\nGY = gy(X2,Y2)\nplt.figure(figsize=(10,5))\nplt.contour(X,Y,Z, levels=np.logspace(0,3,10))\n\nx0=(14,4)\nplt.plot(x0[0],x0[1],'ko',ms=10)\n\nfor i in range(20):\n    g=np.array((gx(x0[0],x0[1]),gy(x0[0],x0[1])))\n    x_next= x0-0.02*g\n    plt.annotate('',xy=x_next,xytext=x0,arrowprops=black)\n    x0= x_next\n    plt.quiver(X2,Y2,GX,GY,color='blue', scale=400, minshaft=2)\n\nplt.xlabel('x')\nplt.ylabel('y')\n\nplt.show()\n```\n\n\n![png](./chapter4_from_page_317_to_318_2_0.png)\n\n\n\n","excerpt":"함수 f(x,y) = 로 표현되는 지형을 그래프로 나타내고, 지형의 (14,4)지점에 공을 두었다면 어떤 경로로 공이 움직일지 경로를 그려라","fields":{"slug":"/chapter4_from_page_317_to_318_files/"},"frontmatter":{"date":"Jan 22, 2021","title":"기울기 벡터를 이용한 응용 문제 풀이.","tags":["Matplotlib","gredient vector","기울기 벡터","퀴버플로"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"### Steps to get a gradient vector.      \n- given equation: f(x,y) = $2x^2 + 6xy + 7y^2 -26x -54y + 107$\n- first, cal with respect to x and y each. Then you will get a two derivative equations\n\n\\begin{equation}\n    \\nabla (f)= \\begin{bmatrix}\n4x+6y-26\\\\\n6x+14y-54\n\\end{bmatrix}\n\\end{equation}\n\n- second, choose the point where you want to get a slope each. Then apply the point.\n    - x=7,y=1\n        - then you will get an (8,2) which is a slope of each derevative. \n- at last, try to get a gradient vector by calculating the following : $\\sqrt{8^2+2^2}$\n\n\n\n\n```python\nimport numpy as np\nimport matplotlib.pylab as plt\n\nblack = {'facecolor':'black'}\ndef g(x,y):\n    return (4*x+6*y-26, 6*x+14*y-54)\ng1 = g(7,1)\ng2 = g(2,1)\n\nplt.plot(0,0,'kP',ms=10)\nplt.plot(g1[0],g1[1],'ro',ms=10)\nplt.annotate('',xy=g1,xytext=(0,0),arrowprops=black)\nplt.plot(g2[0],g2[1],'ro',ms=10)\nplt.annotate('',xy=g2,xytext=(0,0),arrowprops=black)\n\nplt.axis('equal')\nplt.show()\n```\n\n\n![png](./Cal_Matrix_chapter4_from_page_313_to_316_1_0.png)\n\n\nFollowing graph is to show the function : f(x,y) = $2x^2 + 6xy + 7y^2 -26x -54y + 107$\n\n\n```python\ndef f(x,y):\n    return 2*x**2+6*x*y+7*y**2-26*x-54*y+107\nxx = np.linspace(1,16,100)\nyy = np.linspace(-3,6,90)\nX,Y = np.meshgrid(xx,yy)\nZ=f(X,Y)\n\ndef gx(x,y):\n    return 4*x+6*y-26\ndef gy(x,y):\n    return 6*x+14*y-54\n\nxx2 = np.linspace(1,16,15)\nyy2 = np.linspace(-3,6,9)\n\nX2, Y2 = np.meshgrid(xx2,yy2)\nGX = gx(X2,Y2)\nGY = gy(X2,Y2)\nplt.figure(figsize = (10,5))\nplt.contour(X,Y,Z, levels=np.logspace(0,3,10))\nplt.quiver(X2, Y2, GX, GY, color='blue', scale=400, minshaft=2)\n\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('quiver plot')\nplt.show()\n```\n\n\n![png](./Cal_Matrix_chapter4_from_page_313_to_316_3_0.png)\n\n\n\n```python\n\n```\n","excerpt":"Steps to get a gradient vector. given equation: f(x,y) =  first, cal with respect to x and y each. Then you will get a two derivative equat…","fields":{"slug":"/Cal_Matrix_chapter4_from_page_313_to_316_files/"},"frontmatter":{"date":"Jan 18, 2021","title":"Matplotlib을 이용해 기울기 벡터 퀴버플롯 그래프 표현.","tags":["Matplotlib","gredient vector","기울기 벡터","퀴버플로"],"update":"Jan 01, 0001"}}}]}},"pageContext":{}},"staticQueryHashes":["2027115977","694178885"]}